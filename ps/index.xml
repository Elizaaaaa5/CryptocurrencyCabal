<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ps on Cryptocurrency Cabal</title>
    <link>http://bitcoin-class.org/ps/</link>
    <description>Recent content in Ps on Cryptocurrency Cabal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bitcoin-class.org/ps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PS3: CSI: Blockchain</title>
      <link>http://bitcoin-class.org/ps/ps3/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/ps/ps3/</guid>
      <description>

&lt;h1 id=&#34;draft-not-yet-posted:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;DRAFT - Not yet posted!&lt;/h1&gt;

&lt;h1 id=&#34;problem-set-3-br-csi-blockchain:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Problem Set 3:&lt;br&gt; CSI: Blockchain&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;due&#34;&gt;
Due: Sunday, 8 November at 8:29pm
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;purpose:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Purpose&lt;/h2&gt;

&lt;p&gt;The goal of this assignment is for everyone to gain experience analyzing
the blockchain and understanding of the anonymity of bitcoin (and
mechanisms that are used to increase or decrease it), and to hopefully
help the FBI catch some heinous criminals.&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;For this assignment, you may either work alone or with one other person
of your choice.  If you work with a partner, you should together submit
one assignment with both of your names on it that reflects your combined
efforts.  You may, and are encouraged to, discuss all of the problems
with anyone else you want (both on-line using the course web site or any
other means you choose, and in person).&lt;/p&gt;

&lt;h3 id=&#34;submission:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Submit your answers as a single PDF file using &lt;a href=&#34;https://www.dropbox.com/request/oar0AQeg4SJRNtdHbcSS&#34;&gt;this
link&lt;/a&gt;.  The name
of your file should be &lt;code&gt;&amp;lt;your email ID&amp;gt;-ps3.pdf&lt;/code&gt; (if you worked alone)
or &lt;code&gt;&amp;lt;partner1 email ID&amp;gt;-&amp;lt;partner2 email ID&amp;gt;-ps3.pdf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your submission should include clearly marked answers for all the
problems (highlighted in yellow).  None of the questions require
submitting a program, although you may find it helpful to write programs
to develop your answers.  If the code you write is less than a page, it
is best to just include it in the PDF writeup.  If it is longer, you may
submit separate code files (and mention them in the PDF submission).&lt;/p&gt;

&lt;h2 id=&#34;warm-up-manual-exploration:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Warm-Up: Manual Exploration&lt;/h2&gt;

&lt;p&gt;You should have received by email a list of bitcoin addresses that were
given to us by the FBI.  These are addresses that were used to collect
ransom payments from victims of bitcoin ransomware attacks.  In the
scheme perpetrators encrypt a victim’s files and then demand that ransom
payment be made to a specific bitcoin address in return for the key to
decrypt the files.&lt;/p&gt;

&lt;p&gt;One of the addresses are marked with your email ID.  The intent of this
is to ensure that the examination efforts are well distributed over the
provided addresses.  For the manual exploration question, you should
start with that address (but feel free to look at any of the addresses
in the file, and for the programmatic analysis questions, you&amp;rsquo;ll want to
use all the addresses).&lt;/p&gt;

&lt;p&gt;You can use any tool you want to answer these questions, but we suggest
using &lt;a href=&#34;http://blockchain.info&#34;&gt;blockchain.info&lt;/a&gt;.  One useful thing you
can do there is look at the taint analysis to see which other addresses
a given addresses is interacting with (e.g., examine the &lt;a href=&#34;https://blockchain.info/taint/14TCv5MKcyYCM3qij36x8xrKvKHHY1NXmq?reversed=true&#34;&gt;reverse taint
analysis&lt;/a&gt;
to see the addresses that are receiving bitcoin from the given address).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;
&lt;strong&gt;Problem 1.&lt;/strong&gt;
(a) What address are you investigating?&lt;br /&gt;
(b) When was that address in use?
&amp;copy; How many victims appear to have paid into the address?&lt;br /&gt;
(d) How much was collected from each victim (the most relevant value would be the value in US dollars at the time of the payment)?  Did all the victims pay the same amount, or did the requested amount vary by victim?&lt;br /&gt;
(e) How did the ransomist (owner of this address) distribute the proceeds?  Is there a percentage split, or some other fee being paid by the ransomist to other addresses?&lt;br /&gt;
(f) What else can you learn about the operation starting from your transaction?
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Since our goal is to learn as much as we can about the overall
operation, you should post your answers to Problem 1 (for your address)
as a comment on this page.&lt;/p&gt;

&lt;h2 id=&#34;blockchain-apis:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Blockchain APIs&lt;/h2&gt;

&lt;p&gt;One way to analyze the blockchain is to run a full bitcoin node, and
operate on your own local copy of the blockchain.  This requires
downloading and processing a large amount of data (approximately &lt;a href=&#34;https://blockchain.info/charts/blocks-size&#34;&gt;45
GB&lt;/a&gt; today).  Instead, you
can use an external service that provides an API for interacting with
the blockchain.  Several such APIs exist including
&lt;a href=&#34;https://blockchain.info/api&#34;&gt;blockchain.info&lt;/a&gt;, Bitpay&amp;rsquo;s &lt;a href=&#34;https://insight.is/&#34;&gt;Insight
API&lt;/a&gt;, and BlockCypher&amp;rsquo;s &lt;a href=&#34;http://dev.blockcypher.com/&#34;&gt;Blockchain
API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this assignment, you are welcome to use any services and open source
bitcoin libraries and openly-licensed code you want, but must follow the
license requirements of any code you use and credit this code in your
submission.&lt;/p&gt;

&lt;p&gt;The starting examples we provide will use Python and the BlockCypher
&lt;a href=&#34;http://dev.blockcypher.com/&#34;&gt;Blockchain API&lt;/a&gt;, and we provide some
directions to get started using this next (but feel free to use other
tools if you prefer).&lt;/p&gt;

&lt;h3 id=&#34;setting-up-blockcypher-api:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Setting up BlockCypher API&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Install Python.&lt;/strong&gt; Start by downloading and installing Python
  (&lt;a href=&#34;https://www.python.org/downloads/release/python-350/&#34;&gt;https://www.python.org/downloads/release/python-350/&lt;/a&gt;.
  Note that Python V3 is incompatible with Python V2 (on MacOSX, the
  default &lt;code&gt;python&lt;/code&gt; is Python 2.7.2; to use Python 3, use &lt;code&gt;python3&lt;/code&gt;).
  Even if you are not familiar with Python, if you feel comfortable
  learning a new language on the fly you should be fine jumping right
  into this assignment. If you prefer a more structured intro to Python
  there are many tutorials available, including
  &lt;a href=&#34;http://www.learnpython.org/&#34;&gt;http://www.learnpython.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the Blockcypher Python library.&lt;/strong&gt; The &lt;a href=&#34;https://github.com/blockcypher/blockcypher-python&#34;&gt;BlockCypher Python
  library&lt;/a&gt; provides a
  convenient way to use the APIs.  To install it, execute &lt;code&gt;pip install
  blockcypher&lt;/code&gt; (in the command shell).&lt;/p&gt;

&lt;p&gt;Here is some example code that uses the BlockCypher API to find all the
addresses which received bitcoin directly from a sending address:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import blockcypher

def get_receivers(sending_address):
    receiving_addresses = set()
    r = blockcypher.get_address_details(sending_address)
    for tx in r[&#39;txrefs&#39;]: # loop through all transactions
        hash = tx[&#39;tx_hash&#39;]
        transaction = blockcypher.get_transaction_details(hash)
        # was this address an input
        sender = False
        for input in transaction[&#39;inputs&#39;]:
            if sending_address in input[&#39;addresses&#39;]:
                sender = True
                break
        if sender:
            for output in transaction[&#39;outputs&#39;]:
                for adr in output[&#39;addresses&#39;]:
                    receiving_addresses.add((adr, output[&#39;value&#39;]))

    return receiving_addresses

def satoshi_to_BTC(sval):
    return sval / 100000000

sender = &#39;1Ez69SnzzmePmZX3WpEzMKTrcBF2gpNQ55&#39;
print (&amp;quot;Received from &amp;quot; + sender + &amp;quot;: &amp;quot;)
for receiver in get_receivers(sender):
    print(&amp;quot;   &amp;quot; + receiver[0] + &amp;quot; (&amp;quot; + str(satoshi_to_BTC(receiver[1])) + &amp;quot; BTC)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mixing-services:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Mixing Services&lt;/h2&gt;

&lt;p&gt;The directions we provide use blockchain.info’s Python API (&lt;a href=&#34;https://github.com/blockchain/api-v1-client-python&#34;&gt;https://github.com/blockchain/api-v1-client-python&lt;/a&gt;). We will be using its “blockexplorer” module.&lt;/p&gt;

&lt;p&gt;Installing our Tools
Install Python.
Install Blockchain API library. Follow the directions to install Blockchain.info’s API (&lt;a href=&#34;https://github.com/blockchain/api-v1-client-python&#34;&gt;https://github.com/blockchain/api-v1-client-python&lt;/a&gt;). Familiarize yourself with the blockexplorer module (&lt;a href=&#34;https://github.com/blockchain/api-v1-client-python/blob/master/docs/blockexplorer.md&#34;&gt;https://github.com/blockchain/api-v1-client-python/blob/master/docs/blockexplorer.md&lt;/a&gt;). You will mainly be interacting with the “Address” object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;suspects.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Problem 1. Determine the average number of transactions that a given address in the suspect set is used for. (Show how you determined the average, including a snippet of code is fine). What kind of risks, if any, does this scheme take on from using some of the same addresses multiple times?&lt;/p&gt;

&lt;p&gt;Problem 2. Looking manually through some of the transactions (i.e. on blockchain.info) describe any particular patterns you see in the spending behaviors of these addresses. Determine the cumulative amount of bitcoin received by all of the suspect addresses. Next, determine the largest single ransom payment in the set. Provide the tx_index and a justification for why you think this payment was made by a victim.&lt;/p&gt;

&lt;p&gt;Problem 3. Now it’s time to follow the money. We want to figure out if there are any common addresses that eventually receive coin from more than one of the starting addresses. This could detect if the suspect addresses are running received coins through a mixnet, but outputting to the same address eventually, which could mean payments to the same “vendor”. A good approach to this problem could be writing a program that recursively follows successive outputs from a series of seed addresses down to a reasonable depth and then checks for overlap between sets. We are also interested in finding out the relative importance of the addresses found. You can determine this based on factors such as amount of “dirty” bitcoins they receive, number of seed addresses they are associated with, or how many hops away the addresses are on average from associated seed addresses.&lt;/p&gt;

&lt;p&gt;Problem 4. Given the intel we have gathered from our analysis, what do you think some possible next steps could be to de-anonymize the addresses? What kind of additional outside data would be required to make blockchain based findings such as our own actionable intelligence for law enforcement?&lt;/p&gt;

&lt;p&gt;Problem 4 (Bonus?). The following address (not included in suspects.txt) is suspected by the FBI to have been used directly by the attackers. See what interesting things you can find by following the money!&lt;/p&gt;

&lt;p&gt;18dwCxqqmya2ckWjCgTYReYyRL6dZF6pzL&lt;/p&gt;

&lt;h1 id=&#34;anonymity-and-bitcoin:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Anonymity and Bitcoin&lt;/h1&gt;

&lt;p&gt;Readings:&lt;/p&gt;

&lt;h3 id=&#34;submission-1:b29158b067a206a408f4a3d38e1dbe1a&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Follow the submission instructions at the beginning of this page by
8:29pm on Sunday, 8 November.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PS2: The Blockchain</title>
      <link>http://bitcoin-class.org/ps/ps2/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/ps/ps2/</guid>
      <description>

&lt;h1 id=&#34;problem-set-2-br-the-blockchain:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Problem Set 2:&lt;br&gt; The Blockchain&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;due&#34;&gt;
Due: Friday, 9 October at 8:29pm
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;purpose:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Purpose&lt;/h2&gt;

&lt;p&gt;The goal of this assignment is for everyone in the class to understand
how bitcoin mining and the blockchain work, and evaluate risks to the blockchain.&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;For this assignment, everyone should submit their own assignment and
should writeup their own answers to the questions.  You may, and are
encouraged to, discuss all of the problems with anyone else you want
(both on-line using the course web site or any other means you choose,
and in person).&lt;/p&gt;

&lt;h3 id=&#34;submission:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Submit your answers as a single PDF file using &lt;a href=&#34;https://www.dropbox.com/request/oar0AQeg4SJRNtdHbcSS&#34;&gt;this
link&lt;/a&gt;.  The name
of your file should be &lt;code&gt;&amp;lt;your email ID&amp;gt;-ps2.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your submission should include clearly marked answers for all the
problems (highlighted in yellow).  None of the questions require
submitting a program, although you may find it helpful to write programs
to develop your answers.  If the code you write is less than a page, it
is best to just include it in the PDF writeup.  If it is longer, you may
submit separate code files (and mention them in the PDF submission).&lt;/p&gt;

&lt;h1 id=&#34;blockchain-consensus:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Blockchain Consensus&lt;/h1&gt;

&lt;p&gt;These questions concern the original bitcoin paper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Satoshi Nakamoto, &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash
System&lt;/em&gt;&lt;/a&gt;, 2008.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;
&lt;strong&gt;Problem 1.&lt;/strong&gt; In Section 6, Satoshi writes:
&lt;em&gt;&amp;ldquo;The incentive may help encourage nodes to stay honest. If a greedy
attacker is able to assemble more CPU power than all the honest nodes,
he would have to choose between using it to defraud people by stealing
back his payments, or using it to generate new coins. He ought to find
it more profitable to play by the rules, such rules that favour him with
more new coins than everyone else combined, than to undermine the system
and the validity of his own wealth.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What are the assumptions necessary to support Satoshi&amp;rsquo;s claim that it is
more profitable for a greedy attacker with a majority of the mining
power &amp;ldquo;to play by the rules&amp;rdquo;? (other than the assumption that the greedy
attacker is a &amp;ldquo;he&amp;rdquo;)&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 2.&lt;/strong&gt;
    At the end of Section 11, Satoshi presents a table for &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt; &amp;lt; 0.001,
    where it is listed &amp;ldquo;q=0.45 z=340&amp;rdquo;. What does this mean in plain
    English, expressed in a short sentence?
    &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 3.&lt;/strong&gt; For that same table, what would
the &lt;span class=&#34;math&#34;&gt;&lt;em&gt;z&lt;/em&gt;&lt;/span&gt; values be for &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt; &amp;lt; 0.05 (instead of &lt;em&gt;p&lt;/em&gt; &amp;lt; 0.001)?
   &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;merkle-trees-and-storage:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Merkle Trees and Storage&lt;/h1&gt;

&lt;p&gt;Bitcoin uses Merkle Trees to record transactions in a way that enables a
single hash to be used to record a set of transactions, and a small
(logarithmic in the number of transactions) number of hashes to be
sufficient to verify a transaction.  In this question, you&amp;rsquo;ll explore
another use of Merkle Trees to provide verifiable cloud storage.&lt;/p&gt;

&lt;p&gt;Imagine you are storing a database using a cloud storage provider, since
you do not have local storage. Assume that you have just enough local
storage to store a small number of cryptographic hashes or keys. You
fear, however, that your storage provider may be skimping, and may not
actually be storing all of your data.&lt;/p&gt;

&lt;p&gt;So, you want to verify each record as you receive it, to make sure the
data is the same as what you wrote.  In order to do so, you are willing
to write extra cryptographic information with each write, but need to
limit the amount of local storage.&lt;/p&gt;

&lt;p&gt;Assume we are storing &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; records, and we can
query the server for the &lt;span class=&#34;math&#34;&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt;-th record for any &lt;span class=&#34;math&#34;&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt; from 0 to &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt; - 1&lt;/span&gt;. The
data content of the &lt;span class=&#34;math&#34;&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt;-th record will be denoted as &lt;span
class=&#34;math&#34;&gt;data[&lt;em&gt;i&lt;/em&gt;]&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 4.&lt;/strong&gt; One naive approach would be to
just sign each record data with a private key, and verify the signature
on reading it.&lt;/p&gt;

&lt;p&gt;(a) There is a problem with this scheme unless the bytes of &lt;span class=&#34;math&#34;&gt;data[&lt;em&gt;i&lt;/em&gt;]&lt;/span&gt; indicate that it is in fact from &lt;span class=&#34;math&#34;&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt;-th index. What is this problem?&lt;/p&gt;

&lt;p&gt;(b) Suppose we perform a write at position &lt;span class=&#34;math&#34;&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt;, both data and signature. Later on, when we read it back, if the signature matches the data, can we be sure that it is indeed the data item we wrote?
  Explain.
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 5.&lt;/strong&gt; Another approach would be hashing
  the concatenation of all records in the database. This hash is a small
  item that can be stored locally.&lt;/p&gt;

&lt;p&gt;(a) What is the write/read/verify procedure for this system?&lt;/p&gt;

&lt;p&gt;(b) How does the cost of reading and writing to the database scale with &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; (the number of records)?
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 6.&lt;/strong&gt; Instead of using the concatenating all the records linear, they were organized into a Merkle tree.&lt;/p&gt;

&lt;p&gt;(a) What is the write/read/verify procedure for this system?&lt;/p&gt;

&lt;p&gt;(b) How does the cost of reading and writing to the database scale with &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; (the number of records)?
    &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;blockchain:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Blockchain&lt;/h1&gt;

&lt;p&gt;These questions are related to this paper (and what was covered in &lt;a href=&#34;http://bitcoin-class.org/classes/class10&#34;&gt;Class 10&lt;/a&gt; and &lt;a href=&#34;http://bitcoin-class.org/classes/class11&#34;&gt;Class 11&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ittay Eyal and Emin G&amp;uuml;n Sirer, &lt;a href=&#34;http://arxiv.org/pdf/1311.0243v5.pdf&#34;&gt;&lt;em&gt;Majority is not Enough: Bitcoin
Mining is Vulnerable&lt;/em&gt;&lt;/a&gt;, November
2013.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://blockchain.info/orphaned-blocks&#34;&gt;Orphaned Blocks&lt;/a&gt; are blocks
that are submitted to the bitcoin network, and that are valid, but do
not become part of the longest (consensus) blockchain.&lt;/p&gt;

&lt;p&gt;One way to detect selfish mining is to be on the lookout for &amp;ldquo;orphaned&amp;rdquo;
blocks, or blocks that were mined but never became part of the final
blockchain.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you set up a node to monitor orphaned blocks, and you are in a
favorable position in the network that allows you to observe all
orphaned blocks.  Assume that the hashing difficulty stays constant and
the expected block rate is constant at 10 minutes per block.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 7.&lt;/strong&gt;&lt;br /&gt;
  (a) If a mining pool has 15% (&lt;span class=&#34;math&#34;&gt;&amp;alpha;&lt;/span&gt; = 0.15) of the
  total network hashing power, how many blocks is it expected to find in
  a day?&lt;/p&gt;

&lt;p&gt;(b) Obtain a general formula for expected number of blocks a mining pool with &lt;span class=&#34;math&#34;&gt;&amp;alpha;&lt;/span&gt; fraction of the total hashing power should find in &lt;span class=&#34;math&#34;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; minutes.
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;For the next questions, you may assume a very simplified network model
where you can view the network having two &amp;ldquo;supernodes&amp;rdquo;: one represents a
particular mining pool, and the other represents all other nodes in the
network.  The latency between the two supernodes is &lt;span class=&#34;math&#34;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt; seconds.&lt;/p&gt;

&lt;p&gt;With this simple (but very unrealistic) model, we assume that when one
supernode announces a block, all of the rest of the network learns of
the new block &lt;span class=&#34;math&#34;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt; seconds later (but no one
learns of it before that).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 8.&lt;/strong&gt; Assuming all of the miners are
  honest, what is the expected number of orphaned blocks per day for an honest
  mining pool with hashing power &lt;span class=&#34;math&#34;&gt;&amp;alpha;&lt;/span&gt; and latency &lt;span class=&#34;math&#34;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt; (as simplified
  above).
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 9.&lt;/strong&gt; How does this change if the
  mining pool is mining selfishly?  (For this question, assume that the
  selfish mining pool learns of a block announced by the rest of the
  network as soon as it is announced, so will immediately announce any
  withheld blocks at that time.  That is, you may still assume the
  simplified latency &lt;span class=&#34;math&#34;&gt;&lt;em&gt;L&lt;/em&gt;&lt;/span&gt; model, but that the selfish mining pool has a
  spy in the other supernode with a low-latency direct connection to the
  mining pool.)
  &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;pool-hopping:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Pool Hopping&lt;/h1&gt;

&lt;p&gt;Answer &lt;em&gt;either&lt;/em&gt; question 10A or 10B (your choice).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 10A.&lt;/strong&gt; In class, we saw how pool-hopping
can be used to game a &amp;ldquo;proportional&amp;rdquo; reward scheme. Design a simple
reward scheme that eliminates pool-hopping incentive. In particular,
derive the expected reward for your scheme and show that it does not
depend on time since last block (or any variable controlled by the
miner).  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 10B.&lt;/strong&gt; In upcoming classes, we will
   have visits from a law professor (who also works for the State
   Department on international cyberlaw and promulgating the open
   Internet) and an FBI agent who works on criminals using bitcoin for
   ransom.  Come up with at least one good question that you would like
   one of them to answer.
   &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;bonus-opportunities:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Bonus Opportunities&lt;/h1&gt;

&lt;p&gt;The following questions are suggestions for further work, but it is not
expected that everyone will solve them.  (Note that some of these could
be starting ideas for larger projects, although a good answer to any of
them would be most impressive.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge 1.&lt;/strong&gt; The network model in questions 8 and 9 is very
  unrealistic.  Answer these questions for a more realistic model of the
  bitcoin network, and compare your results with the actual rates of
  orphaned blocks.  To better detect misbehaving miners, you would want
  to also look into the contents of the dual blocks (note that the one
  that was orphaned is not necessarily the one from the selfish miner).
  There is an API for obtaining orphaned blocks provided by
  &lt;a href=&#34;https://api.biteasy.com/blockchain/v1/blocks?type=ORPHANED&#34;&gt;https://api.biteasy.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge 2.&lt;/strong&gt; The analysis in the paper and in class assumed that if
   the selfish miner is ahead by 2 blocks, it will always win by
   releasing the blocks when it observes a new block on the blockchain.
   It could still lose if the rest of the network finds a second block
   before the selfish miner&amp;rsquo;s blocks have propagated over the network.
   How does this possibility impact the analysis?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge 3.&lt;/strong&gt; The site that was demonstrated in Class 11 uses a very
  simple model to estimate the profitability of a particular bitcoin
  miner.  Produce a better model, and use it to evaluated the expected
  profit (or loss) for mining hardware such as &lt;a href=&#34;https://bitmaintech.com/product.htm&#34;&gt;Antminer
  S7&lt;/a&gt;.  A better model would need
  to capture expected increases in the difficulty, cost of capital, and
  other costs of mining besides electricity.&lt;/p&gt;

&lt;h3 id=&#34;submission-1:e879021a243163cdf3d1d9f61ef73807&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Follow the submission instructions at the beginning of this page by
8:29pm on Friday, 9 October.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PS1: Bitcoin Transactions</title>
      <link>http://bitcoin-class.org/ps/ps1/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/ps/ps1/</guid>
      <description>

&lt;h1 id=&#34;problem-set-1-bitcoin-transactions:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Problem Set 1: Bitcoin Transactions&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;due&#34;&gt;
Due: Tuesday, 15 September at 8:29pm
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;purpose:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Purpose&lt;/h2&gt;

&lt;p&gt;The goal of this assignment is for everyone in the class to understand
how keys, addresses, and transactions work in bitcoin.  In addition,
this assignment should help everyone get up-to-speed with the software
tools (including the Go programming language) we will use in later
assignments.&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;For this assignment, everyone should submit their own assignment and
should writeup their own answers to the questions as well as execute all
the required transactions with your own keys.&lt;/p&gt;

&lt;p&gt;You may, and are encouraged to, discuss all of the problems with anyone
else you want (both on-line using the course web site or any other means
you choose, and in person), and it is okay to share code with others so
long as you understand everything in all of the code you use.&lt;/p&gt;

&lt;h3 id=&#34;submission:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Submit your answers as a single PDF file using &lt;a href=&#34;https://www.dropbox.com/request/KV26Qd6UrcB9j6nBLVw8&#34;&gt;this
link&lt;/a&gt;.  The name
of your file should be &lt;code&gt;&amp;lt;your email ID&amp;gt;-ps1.pdf&lt;/code&gt;.  (In addition to the
PDF file you submit, you may submit a separate &lt;code&gt;spend.go&lt;/code&gt; file with your
code for question 11, or incorporate that code into the PDF submission.)&lt;/p&gt;

&lt;p&gt;Your submission should include clearly marked answers for all the
problems (highlighted in yellow).&lt;/p&gt;

&lt;h1 id=&#34;blockchain-sleuthing:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Blockchain Sleuthing&lt;/h1&gt;

&lt;p&gt;You should have received some bitcoin at the address you submitted in
the registration form.  (If you did not receive any bitcoin, contact the
course staff right away!)&lt;/p&gt;

&lt;p&gt;From that transaction, you have an address that was used to send you the
bitcoin.  For these questions, your goal is to figure out what you can
about the way bitcoin was distributed to the class.  For these
questions, manual sleuthing should be sufficient (although ambitious
students may find ways to automate this).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 1.&lt;/strong&gt; Answer the following questions about the transaction
  where you received the bitcoin.  If you received more than one
  transfer, include all the transaction IDs).&lt;/p&gt;

&lt;p&gt;a. What is the transaction ID?&lt;/p&gt;

&lt;p&gt;b. What was the transaction fee for the transaction?  (Give your answer
in BTC, as well as current approximate US dollar value.)&lt;/p&gt;

&lt;p&gt;c. What was the total value of all the transactions in the block
containing your transfer?  (Note:
&lt;a href=&#34;https://blockchain.info&#34;&gt;https://blockchain.info&lt;/a&gt; provides this info
conveniently, although you could compute it yourself)&lt;/p&gt;

&lt;p&gt;d. How long did it take from when the transaction was received until it
had 3 confirmations?  (Include an explanation of how you estimated this
in your answer.)
    &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin advocates often taut its &amp;ldquo;anonymity&amp;rdquo;, but bitcoin transactions
are actually publicly visible.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 2.&lt;/strong&gt; See how much can you figure out about the way bitcoin was
transferred to students in the class, starting from your transactions.&lt;/p&gt;

&lt;p&gt;a. Identify the bitcoin addresses of what are likely to be other
students in the class (you could potentially find all of them, but it is
enough to find 3).&lt;/p&gt;

&lt;p&gt;b. Trace back the source of the bitcoin as far as you can.  Bonus points
if you can figure out from which exchange the bitcoin was purchased and
when.&lt;/p&gt;

&lt;p&gt;c. (Bonus) Can you learn anything about where the send of the bitcoin is
located geographically?  (In this case, you have external information to
know I&amp;rsquo;m in Charlottesville, but what could you learn about the sender&amp;rsquo;s
probable location just from the information in the blockchain?)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Hints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start by looking at the transaction that sent bitcoin to your
receiving address.  You can search for this by searching for your
recieving address at
&lt;a href=&#34;https://blockexplorer.com&#34;&gt;https://blockexplorer.com&lt;/a&gt;,
&lt;a href=&#34;https://insight.bitpay.com/&#34;&gt;https://insight.bitpay.com/&lt;/a&gt;,
&lt;a href=&#34;https://blockchain.info&#34;&gt;https://blockchain.info&lt;/a&gt;, or many other
sites that provide information about the bitcoin blockchain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can go forward, by following what happened with the &amp;ldquo;change&amp;rdquo; from
that transaction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can go backward, by following transactions to the sending address.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 3.&lt;/strong&gt; Suppose a malicious developer wanted to distribute a
  bitcoin wallet implementation that would steal as much bitcoin as
  possible from its users with a little chance as possible of getting
  caught.  (a) Explain things a malicious developed might do to create
  an evil wallet.  (b) How confident are you your money is safe in the
  wallet you are using, and what would you do to increase your
  confidence if you were going to store all of your income in it?
   &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;getting-going:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Getting GOing&lt;/h1&gt;

&lt;p&gt;You are free to use any programming language and open source bitcoin
libraries and openly-licensed code you want for this assignment, but
must follow the license requirements of any code you use and credit this
code in your submission.&lt;/p&gt;

&lt;p&gt;The directions we provide use the &lt;a href=&#34;https://github.com/btcsuite&#34;&gt;BTC
Suite&lt;/a&gt; library for bitcoin, implemented in
the &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of you do not have any experience using Go, but it is not a
difficult language to learn coming from experience with Java (which all
of you have), and although its not &lt;a href=&#34;http://rust-class.org&#34;&gt;my favorite programming
language&lt;/a&gt; it is a language that nearly everyone
finds enjoyable to use and it is becoming widely used in industry
(especially at Google, where it was developed).  The main reason we are
using it for this, though, is because the &lt;a href=&#34;https://github.com/btcsuite&#34;&gt;BTC
library&lt;/a&gt; is the best bitcoin library we are
aware of, and it is written in Go.&lt;/p&gt;

&lt;p&gt;If you are comfortable learning a new programming language by diving
right into moderately complex programs and figuring out things as you
go, you should be able to jump right into this assignment.  If you
prefer a more structured introduction to Go, there are many tutorials
available, including the &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;Tour of
Go&lt;/a&gt;.  The &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by
Example&lt;/a&gt; site is very helpful.  For more
documentation, visit &lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;.&lt;/p&gt;

&lt;!--
# Going Gets Good

After you have installed go, you can set up the BTC library by doing:

```shell
&gt; go get github.com/btcsuite/btcec
```
--&gt;

&lt;h1 id=&#34;obtain-the-starting-code:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Obtain the Starting Code&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Install Go.&lt;/strong&gt;
Start by &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;downloading and installing
Go&lt;/a&gt;.  The latest version is go1.5, which
is the version you should use.&lt;/p&gt;

&lt;p&gt;Make sure to create a directory to contain your workspace and set the
GOPATH environment variable to point to that location (these commands
are for the Mac OS X shell and the bash shell on Linux):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mkdir go_workspace
$ export GOPATH=$Home/go_workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install BTCD.&lt;/strong&gt; &lt;a href=&#34;https://github.com/btcsuite/btcd&#34;&gt;Follow the directions to install
  btcd&lt;/a&gt; from btcsuite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up git.&lt;/strong&gt; Before continuing with this assignment, you should
&lt;a href=&#34;http://bitcoin-class.org/tools/github/&#34;&gt;set up git and your github account&lt;/a&gt;
and follow the directions there to set up your private repository
containing the starting code for ps1.  (It may seem like overkill to use
git for this assignment since you will not need to write much code or
work with teammates on this one.  But, it is good to get experience
using git and will become necessary to work effectively with teammates
for later projects.)&lt;/p&gt;

&lt;p&gt;Once you have finished setting up your &lt;code&gt;ps1&lt;/code&gt; repository, it should
contain the files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/keypair.go&#34;&gt;keypair.go&lt;/a&gt;:
code for generating a bitcoin key pair (including its public address).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/spend.go&#34;&gt;spend.go&lt;/a&gt;: code for generating a bitcoin transaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;elliptic-curve-cryptography:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Elliptic Curve Cryptography&lt;/h1&gt;

&lt;p&gt;The btcsuite library includes,
&lt;a href=&#34;https://github.com/btcsuite/btcd/tree/master/btcec&#34;&gt;btcec&lt;/a&gt;, an
implementation of the ECDSA digital signatures algorithm using the
&lt;a href=&#34;https://en.bitcoin.it/wiki/Secp256k1&#34;&gt;secp256k1&lt;/a&gt; elliptic curve used by
bitcoin.&lt;/p&gt;

&lt;p&gt;Examine the
&lt;a href=&#34;https://github.com/btcsuite/btcd/blob/master/btcec/btcec.go&#34;&gt;btcec.go&lt;/a&gt;
code.  For example, you should be able to find the &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 7&lt;/span&gt; curve in this
code.&lt;/p&gt;

&lt;p&gt;Elliptic curves for cryptography needs really big numbers.  The modulus for the &lt;code&gt;secp256k1&lt;/code&gt; curve is found on &lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/btcec.go#L909&#34;&gt;line 929&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; secp256k1.P = fromHex(&amp;quot;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be the value &lt;span class=&#34;math&#34;&gt;2&lt;sup&gt;256&lt;/sup&gt; - 2&lt;sup&gt;32&lt;/sup&gt; - 2&lt;sup&gt;9&lt;/sup&gt; - 2&lt;sup&gt;8&lt;/sup&gt; - 2&lt;sup&gt;7&lt;/sup&gt; - 2&lt;sup&gt;6&lt;/sup&gt; - 2&lt;sup&gt;4&lt;/sup&gt; - 1.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 4.&lt;/strong&gt; Verify that the modulus used as &lt;code&gt;secp256k1.P&lt;/code&gt; in
  &lt;code&gt;btcec.go&lt;/code&gt; is correct.  You can do this either using
  &lt;a href=&#34;https://golang.org/pkg/math/big/&#34;&gt;math/big&lt;/a&gt;, Go&amp;rsquo;s bit integer library
  to do computations on such large numbers, or by computing it by hand.
  (For your answer, just show how you verified the modulus.  Including a
  snippet of code is fine.)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-a-key-pair:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Generating a Key Pair&lt;/h2&gt;

&lt;p&gt;We have provided code in &lt;code&gt;keypair.go&lt;/code&gt; that generates a bitcoin key pair.
You can try running this by running &lt;code&gt;go run keypair.go&lt;/code&gt; (or you can
compile it with &lt;code&gt;go build keypair.go&lt;/code&gt; and then run the resulting
executable &lt;code&gt;keypair&lt;/code&gt;).  It will print out the generated private key and
corresponding public bitcoin address.  (Try running it a few times to
see that it produces a different key pair each time.)&lt;/p&gt;

&lt;p&gt;Keys for ECDSC are generated by choosing a random private key, &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt;, and finding the corresponding public key by
&amp;ldquo;multiplying&amp;rdquo; it by &lt;span class=&#34;math&#34;&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, the generator point.
(Multiplication here is not standard multiplication, but multiplication
on the elliptic curve, as discussed in &lt;a href=&#34;http://bitcoin-class.org/classes/class3/&#34;&gt;Class 3&lt;/a&gt;.)  The point &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt; is defined by &lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/btcec.go#L912&#34;&gt;lines
912-3&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;secp256k1.Gx = fromHex(&amp;quot;79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798&amp;quot;)
secp256k1.Gy = fromHex(&amp;quot;483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting point is the public key.  It is easy to derive the public
key from the private key, but believed to be hard to learn anything
useful about the private key from the public key.  The belief that it
is hard to reverse the elliptic curve multiplication is based on the
assumption that it is hard to compute discrete logarithms, which is not
proven, but underlies much of modern cryptography.&lt;/p&gt;

&lt;p&gt;The code for generating a new keypair is in &lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/keypair.go#L20&#34;&gt;keypair.go&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func generateKeyPair() (*btcec.PublicKey, *btcec.PrivateKey) {
   priv, err := btcec.NewPrivateKey(btcec.S256())
   if err != nil {
       // There was an error. Log it and bail out
       log.Fatal(err)
   }
   return priv.PubKey(), priv
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important work is done by the
&lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/privkey.go#L38&#34;&gt;NewPrivateKey&lt;/a&gt;
function.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 5.&lt;/strong&gt; What are &lt;em&gt;all&lt;/em&gt; the things you need to trust if you are
going to send money to the key generated by running &lt;code&gt;keypair.go&lt;/code&gt;?  You
should assume that you are an ultra-paranoid multi-billionaire who
intends to transfer her entire fortune to the generated address.&lt;br /&gt;
    &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-a-vanity-address:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Generating a Vanity Address&lt;/h2&gt;

&lt;p&gt;Anyone can have a bitcoin address like
&lt;code&gt;1H7tu2qUAyyr5aX1WA17eyvbetAGyqxfKZ&lt;/code&gt; or
&lt;code&gt;1L3iGYBD5wbiki2SYUT5wmupy4TTgmEBg3&lt;/code&gt;, but suppose you want a bitcoin
address that includes the name of your cat or your birthday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 6.&lt;/strong&gt; Define a function, &lt;code&gt;func
generateVanityAddress(pattern string) (*btcec.PublicKey,
*btcec.PrivateKey)&lt;/code&gt; where &lt;code&gt;pattern&lt;/code&gt; is a regular expression.  It should
return a valid key pair where the corresponding public address &lt;a href=&#34;http://golang.org/pkg/regexp/#MatchString&#34;&gt;matches
the pattern&lt;/a&gt;.&lt;br /&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You should be able to use your function to generate an address that
includes the digits of pi in sequence:
&lt;code&gt;generateVanityAddress(&amp;quot;3.*1.*4.*1.*5.*9.*&amp;quot;)&lt;/code&gt; or contains &lt;code&gt;dave&lt;/code&gt; without
any adjacent letters (&lt;code&gt;generateVanityAddress(&amp;quot;[0-9]dave[0-9]&amp;quot;)&lt;/code&gt;) in its
public bitcoin address.  In deciding how vain you want to be for the
next exercise, think about how the running time scales with the number
of strings that match the target pattern.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 7.&lt;/strong&gt; Use your &lt;code&gt;generateVanityAddress&lt;/code&gt;
function to create your own vanity address.  Its up to you to decide
what to put in your vanity address, but it should be clear that your
address is not a typical random one.  If you are extra vain, create a
address where your name appears at the beginning (after the initial
&lt;code&gt;1&lt;/code&gt;).  (Note that uppercase &amp;lsquo;O&amp;rsquo; and &amp;lsquo;I&amp;rsquo; and lowercase &amp;lsquo;l&amp;rsquo; are not used
in any address, so if your name includes these letters you will have to
be creative.)&lt;br /&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 8.&lt;/strong&gt;   Is your vanity address more or less secure than the first address you generated?
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;There are on-line services that produce vanity addresses, like
   &lt;a href=&#34;http://bitcoinvanitygen.com/&#34;&gt;http://bitcoinvanitygen.com/&lt;/a&gt;.  You
   should contemplate briefly whether using such a site is &lt;a href=&#34;http://www.reddit.com/r/Bitcoin/comments/21foj9/funds_currently_being_stolen_from_vanity/&#34;&gt;more vain or
   stupid&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;bitcoin-transactions:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Bitcoin Transactions&lt;/h1&gt;

&lt;p&gt;Having an address is not much fun without any funds!&lt;/p&gt;

&lt;p&gt;You should have received some money to the address you submitted in
&lt;a href=&#34;../../ps/ps0/ps0.md&#34;&gt;PS0&lt;/a&gt;.  For these questions, you will need to have
actual money to transfer, so be careful to make small transfers for
these questions in case something goes wrong.  (In the event that you do
lose all of your bitcoin, you can get a new transfer to an adress of
your choosing by explaining to me what you have learned about software
development and or best practices.  It is not necessary to buy your own
bitcoin, even if you lose all of the original transfer.)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;b&gt;Problem 9.&lt;/b&gt; Make a &lt;strong&gt;small&lt;/strong&gt; (e.g., 1 mBTC) transfer from
your wallet address to your vanity address.  You can do this using
your MultiBit wallet.  Find the transaction in the blockchain (you can do this by
searching for your vanity address at
&lt;a href=&#34;https://insight.bitpay.com/&#34;&gt;insight.bitpay.com&lt;/a&gt; or
&lt;a href=&#34;https://blockchain.info/&#34;&gt;blockchain.info&lt;/a&gt;). You will need the
transaction ID for the next exercise.  (For your answer, just provide the transaction ID.)
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Once you have located the transaction that sends bitcoin to your vanity
address you should notice several things.&lt;/p&gt;

&lt;p&gt;Your wallet most likely send bitcoins to your address &lt;em&gt;and&lt;/em&gt; back to a
new address.  We call this second address the &amp;lsquo;change&amp;rsquo; address. Notice
that each output has an ordered position. This index (known as the &lt;code&gt;vout&lt;/code&gt;)
along with the transaction ID lets us uniquely identify transaction
outputs. This is important if you want to use those outputs in a new
transaction.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 10.&lt;/strong&gt; Transfer some bitcoin from your vanity address to someone
else in the class (you can use one of the addresses you identified in
Problem 2). To do this you can run &lt;code&gt;spend.go&lt;/code&gt; in ps1. You can provide
the parameters needed for the transaction at the command line (it is not
necessary to modify the code).
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If done correctly the script should look this when executed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; go run spend.go \
      -privkey &amp;quot;f3942c1e1...87&amp;quot; \
      -toaddress &amp;quot;19WmbY4nDcjAEv6wb5rcd5E6MutVMXBZzy&amp;quot; \
      -txid &amp;quot;9070329c2850d9b1dadeaa8683039b273beb58a27812172e31e397cf19fd5ca0&amp;quot; \
      -vout 0
Here is your raw bitcoin transaction:
0100000001a05cfd19cf97e3312e171278a258eb3b279b038386aadedab1d950289c327090000000006a47304402201d2fd4818cf4f4faa8\
4bbd407e5477c2a3722b137339460ff99c7255ad63bcc802201d991cad02e62d24fb4db2527a456159e069567116a325ee09186061395839\
e901210324594ad7124d0812e060200b66cc5199142e9adc42b0cd0c40f457eac4005d5dffffffff01f78a0100000000001976a9145d624b\
a9f2c55817af8b819ed4aaae55a36e256288ac00000000
The sending api responded with:
{&amp;quot;txid&amp;quot;:&amp;quot;e5f4cb8e3736cab91ff4eb889bc8af659f1d8d398b3f934c8d63871b495d9065&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve left out most of my private key, since posting your private key on
the web is not a very smart thing to do!&lt;/p&gt;

&lt;p&gt;Notice that when the command above is run with these parameters it only
works
&lt;a href=&#34;https://blockchain.info/tx/e5f4cb8e3736cab91ff4eb889bc8af659f1d8d398b3f934c8d63871b495d9065&#34;&gt;once&lt;/a&gt;.
If you try to run it again you should get an API error since the input
transaction has already been spent.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 11.&lt;/strong&gt; The provided &lt;code&gt;spend.go&lt;/code&gt; code
   sends the full amount of the input transaction (less the network fee)
   to the destination address.  Modify the program to add an &lt;code&gt;-amount
   &amp;lt;value&amp;gt;&lt;/code&gt; flag that takes the amount to transfer in satoshi.  If the amount
   available in the specified transaction output (less the network fee) exceeds the
   amount to send, your program should print an error message.
   Otherwise, it should send the requested amount to the toaddress, and
   send the change back to your address.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Try using your modified spending code to send a small amount to another
address, and do another transaction to check that the change you receive
back is still spendable.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;b&gt;Problem 12.&lt;/b&gt; (Bonus) Try to double spend the same
bitcoin.  Figure out as much as you can about what happens when the
double spend transactions are attempted.  See if you can get a
transaction to appear on the &lt;a href=&#34;https://blockchain.info/double-spends&#34;&gt;list of double
spends&lt;/a&gt;.  See how close you can get to obtaining two verified
transactions spending the same coin (e.g., can you achieve two
transactions with at least one confirmation each?)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Please don&amp;rsquo;t try to actually rip anyone off; only attempt double
spending with your own addresses (or those of willing classmates).  You
are not expected to actually be able to double-spend successfully (if
this were easy, bitcoin would not work well as a currency!), but should
be able to learn something by attemting to do this.&lt;/p&gt;

&lt;h3 id=&#34;submission-1:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Follow the submission instructions at the beginning of this page by
8:29pm on Tuesday, 15 September.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
