<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptocurrency Cabal</title>
    <link>http://bitcoin-class.org/</link>
    <description>Recent content on Cryptocurrency Cabal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bitcoin-class.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PS1: Bitcoin Transactions</title>
      <link>http://bitcoin-class.org/ps/ps1/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/ps/ps1/</guid>
      <description>

&lt;h1 id=&#34;problem-set-1-bitcoin-transactions:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Problem Set 1: Bitcoin Transactions&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;due&#34;&gt;
Due: Tuesday, 15 September at 8:29pm
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;purpose:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Purpose&lt;/h2&gt;

&lt;p&gt;The goal of this assignment is for everyone in the class to understand
how keys, addresses, and transactions work in bitcoin.  In addition,
this assignment should help everyone get up-to-speed with the software
tools (including the Go programming language) we will use in later
assignments.&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;For this assignment, everyone should submit their own assignment and
should writeup their own answers to the questions as well as execute all
the required transactions with your own keys.&lt;/p&gt;

&lt;p&gt;You may, and are encouraged to, discuss all of the problems with anyone
else you want (both on-line using the course web site or any other means
you choose, and in person), and it is okay to share code with others so
long as you understand everything in all of the code you use.&lt;/p&gt;

&lt;h3 id=&#34;submission:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Submit your answers as a single PDF file using &lt;a href=&#34;https://www.dropbox.com/request/KV26Qd6UrcB9j6nBLVw8&#34;&gt;this
link&lt;/a&gt;.  The name
of your file should be &lt;code&gt;&amp;lt;your email ID&amp;gt;-ps1.pdf&lt;/code&gt;.  (In addition to the
PDF file you submit, you may submit a separate &lt;code&gt;spend.go&lt;/code&gt; file with your
code for question 11, or incorporate that code into the PDF submission.)&lt;/p&gt;

&lt;p&gt;Your submission should include clearly marked answers for all the
problems (highlighted in yellow).&lt;/p&gt;

&lt;h1 id=&#34;blockchain-sleuthing:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Blockchain Sleuthing&lt;/h1&gt;

&lt;p&gt;You should have received some bitcoin at the address you submitted in
the registration form.  (If you did not receive any bitcoin, contact the
course staff right away!)&lt;/p&gt;

&lt;p&gt;From that transaction, you have an address that was used to send you the
bitcoin.  For these questions, your goal is to figure out what you can
about the way bitcoin was distributed to the class.  For these
questions, manual sleuthing should be sufficient (although ambitious
students may find ways to automate this).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 1.&lt;/strong&gt; Answer the following questions about the transaction
  where you received the bitcoin.  If you received more than one
  transfer, include all the transaction IDs).&lt;/p&gt;

&lt;p&gt;a. What is the transaction ID?&lt;/p&gt;

&lt;p&gt;b. What was the transaction fee for the transaction?  (Give your answer
in BTC, as well as current approximate US dollar value.)&lt;/p&gt;

&lt;p&gt;c. What was the total value of all the transactions in the block
containing your transfer?  (Note:
&lt;a href=&#34;https://blockchain.info&#34;&gt;https://blockchain.info&lt;/a&gt; provides this info
conveniently, although you could compute it yourself)&lt;/p&gt;

&lt;p&gt;d. How long did it take from when the transaction was received until it
had 3 confirmations?  (Include an explanation of how you estimated this
in your answer.)
    &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin advocates often taut its &amp;ldquo;anonymity&amp;rdquo;, but bitcoin transactions
are actually publicly visible.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 2.&lt;/strong&gt; See how much can you figure out about the way bitcoin was
transferred to students in the class, starting from your transactions.&lt;/p&gt;

&lt;p&gt;a. Identify the bitcoin addresses of what are likely to be other
students in the class (you could potentially find all of them, but it is
enough to find 3).&lt;/p&gt;

&lt;p&gt;b. Trace back the source of the bitcoin as far as you can.  Bonus points
if you can figure out from which exchange the bitcoin was purchased and
when.&lt;/p&gt;

&lt;p&gt;c. (Bonus) Can you learn anything about where the send of the bitcoin is
located geographically?  (In this case, you have external information to
know I&amp;rsquo;m in Charlottesville, but what could you learn about the sender&amp;rsquo;s
probable location just from the information in the blockchain?)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Hints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start by looking at the transaction that sent bitcoin to your
receiving address.  You can search for this by searching for your
recieving address at
&lt;a href=&#34;https://blockexplorer.com&#34;&gt;https://blockexplorer.com&lt;/a&gt;,
&lt;a href=&#34;https://insight.bitpay.com/&#34;&gt;https://insight.bitpay.com/&lt;/a&gt;,
&lt;a href=&#34;https://blockchain.info&#34;&gt;https://blockchain.info&lt;/a&gt;, or many other
sites that provide information about the bitcoin blockchain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can go forward, by following what happened with the &amp;ldquo;change&amp;rdquo; from
that transaction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can go backward, by following transactions to the sending address.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 3.&lt;/strong&gt; Suppose a malicious developer wanted to distribute a
  bitcoin wallet implementation that would steal as much bitcoin as
  possible from its users with a little chance as possible of getting
  caught.  (a) Explain things a malicious developed might do to create
  an evil wallet.  (b) How confident are you your money is safe in the
  wallet you are using, and what would you do to increase your
  confidence if you were going to store all of your income in it?
   &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;getting-going:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Getting GOing&lt;/h1&gt;

&lt;p&gt;You are free to use any programming language and open source bitcoin
libraries and openly-licensed code you want for this assignment, but
must follow the license requirements of any code you use and credit this
code in your submission.&lt;/p&gt;

&lt;p&gt;The directions we provide use the &lt;a href=&#34;https://github.com/btcsuite&#34;&gt;BTC
Suite&lt;/a&gt; library for bitcoin, implemented in
the &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of you do not have any experience using Go, but it is not a
difficult language to learn coming from experience with Java (which all
of you have), and although its not &lt;a href=&#34;http://rust-class.org&#34;&gt;my favorite programming
language&lt;/a&gt; it is a language that nearly everyone
finds enjoyable to use and it is becoming widely used in industry
(especially at Google, where it was developed).  The main reason we are
using it for this, though, is because the &lt;a href=&#34;https://github.com/btcsuite&#34;&gt;BTC
library&lt;/a&gt; is the best bitcoin library we are
aware of, and it is written in Go.&lt;/p&gt;

&lt;p&gt;If you are comfortable learning a new programming language by diving
right into moderately complex programs and figuring out things as you
go, you should be able to jump right into this assignment.  If you
prefer a more structured introduction to Go, there are many tutorials
available, including the &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;Tour of
Go&lt;/a&gt;.  The &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by
Example&lt;/a&gt; site is very helpful.  For more
documentation, visit &lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;.&lt;/p&gt;

&lt;!--
# Going Gets Good

After you have installed go, you can set up the BTC library by doing:

```shell
&gt; go get github.com/btcsuite/btcec
```
--&gt;

&lt;h1 id=&#34;obtain-the-starting-code:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Obtain the Starting Code&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Install Go.&lt;/strong&gt;
Start by &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;downloading and installing
Go&lt;/a&gt;.  The latest version is go1.5, which
is the version you should use.&lt;/p&gt;

&lt;p&gt;Make sure to create a directory to contain your workspace and set the
GOPATH environment variable to point to that location (these commands
are for the Mac OS X shell and the bash shell on Linux):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mkdir go_workspace
$ export GOPATH=$Home/go_workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install BTCD.&lt;/strong&gt; &lt;a href=&#34;https://github.com/btcsuite/btcd&#34;&gt;Follow the directions to install
  btcd&lt;/a&gt; from btcsuite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up git.&lt;/strong&gt; Before continuing with this assignment, you should
&lt;a href=&#34;http://bitcoin-class.org/tools/github/&#34;&gt;set up git and your github account&lt;/a&gt;
and follow the directions there to set up your private repository
containing the starting code for ps1.  (It may seem like overkill to use
git for this assignment since you will not need to write much code or
work with teammates on this one.  But, it is good to get experience
using git and will become necessary to work effectively with teammates
for later projects.)&lt;/p&gt;

&lt;p&gt;Once you have finished setting up your &lt;code&gt;ps1&lt;/code&gt; repository, it should
contain the files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/keypair.go&#34;&gt;keypair.go&lt;/a&gt;:
code for generating a bitcoin key pair (including its public address).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/spend.go&#34;&gt;spend.go&lt;/a&gt;: code for generating a bitcoin transaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;elliptic-curve-cryptography:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Elliptic Curve Cryptography&lt;/h1&gt;

&lt;p&gt;The btcsuite library includes,
&lt;a href=&#34;https://github.com/btcsuite/btcd/tree/master/btcec&#34;&gt;btcec&lt;/a&gt;, an
implementation of the ECDSA digital signatures algorithm using the
&lt;a href=&#34;https://en.bitcoin.it/wiki/Secp256k1&#34;&gt;secp256k1&lt;/a&gt; elliptic curve used by
bitcoin.&lt;/p&gt;

&lt;p&gt;Examine the
&lt;a href=&#34;https://github.com/btcsuite/btcd/blob/master/btcec/btcec.go&#34;&gt;btcec.go&lt;/a&gt;
code.  For example, you should be able to find the &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 7&lt;/span&gt; curve in this
code.&lt;/p&gt;

&lt;p&gt;Elliptic curves for cryptography needs really big numbers.  The modulus for the &lt;code&gt;secp256k1&lt;/code&gt; curve is found on &lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/btcec.go#L909&#34;&gt;line 929&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; secp256k1.P = fromHex(&amp;quot;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be the value &lt;span class=&#34;math&#34;&gt;2&lt;sup&gt;256&lt;/sup&gt; - 2&lt;sup&gt;32&lt;/sup&gt; - 2&lt;sup&gt;9&lt;/sup&gt; - 2&lt;sup&gt;8&lt;/sup&gt; - 2&lt;sup&gt;7&lt;/sup&gt; - 2&lt;sup&gt;6&lt;/sup&gt; - 2&lt;sup&gt;4&lt;/sup&gt; - 1.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 4.&lt;/strong&gt; Verify that the modulus used as &lt;code&gt;secp256k1.P&lt;/code&gt; in
  &lt;code&gt;btcec.go&lt;/code&gt; is correct.  You can do this either using
  &lt;a href=&#34;https://golang.org/pkg/math/big/&#34;&gt;math/big&lt;/a&gt;, Go&amp;rsquo;s bit integer library
  to do computations on such large numbers, or by computing it by hand.
  (For your answer, just show how you verified the modulus.  Including a
  snippet of code is fine.)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-a-key-pair:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Generating a Key Pair&lt;/h2&gt;

&lt;p&gt;We have provided code in &lt;code&gt;keypair.go&lt;/code&gt; that generates a bitcoin key pair.
You can try running this by running &lt;code&gt;go run keypair.go&lt;/code&gt; (or you can
compile it with &lt;code&gt;go build keypair.go&lt;/code&gt; and then run the resulting
executable &lt;code&gt;keypair&lt;/code&gt;).  It will print out the generated private key and
corresponding public bitcoin address.  (Try running it a few times to
see that it produces a different key pair each time.)&lt;/p&gt;

&lt;p&gt;Keys for ECDSC are generated by choosing a random private key, &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt;, and finding the corresponding public key by
&amp;ldquo;multiplying&amp;rdquo; it by &lt;span class=&#34;math&#34;&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, the generator point.
(Multiplication here is not standard multiplication, but multiplication
on the elliptic curve, as discussed in &lt;a href=&#34;http://bitcoin-class.org/classes/class3/&#34;&gt;Class 3&lt;/a&gt;.)  The point &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt; is defined by &lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/btcec.go#L912&#34;&gt;lines
912-3&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;secp256k1.Gx = fromHex(&amp;quot;79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798&amp;quot;)
secp256k1.Gy = fromHex(&amp;quot;483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting point is the public key.  It is easy to derive the public
key from the private key, but believed to be hard to learn anything
useful about the private key from the public key.  The belief that it
is hard to reverse the elliptic curve multiplication is based on the
assumption that it is hard to compute discrete logarithms, which is not
proven, but underlies much of modern cryptography.&lt;/p&gt;

&lt;p&gt;The code for generating a new keypair is in &lt;a href=&#34;https://github.com/CryptocurrencyCabal/ps1/blob/master/keypair.go#L20&#34;&gt;keypair.go&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func generateKeyPair() (*btcec.PublicKey, *btcec.PrivateKey) {
   priv, err := btcec.NewPrivateKey(btcec.S256())
   if err != nil {
       // There was an error. Log it and bail out
       log.Fatal(err)
   }
   return priv.PubKey(), priv
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important work is done by the
&lt;a href=&#34;https://github.com/btcsuite/btcd/blob/BTCD_0_11_1_BETA/btcec/privkey.go#L38&#34;&gt;NewPrivateKey&lt;/a&gt;
function.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 5.&lt;/strong&gt; What are &lt;em&gt;all&lt;/em&gt; the things you need to trust if you are
going to send money to the key generated by running &lt;code&gt;keypair.go&lt;/code&gt;?  You
should assume that you are an ultra-paranoid multi-billionaire who
intends to transfer her entire fortune to the generated address.&lt;br /&gt;
    &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-a-vanity-address:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Generating a Vanity Address&lt;/h2&gt;

&lt;p&gt;Anyone can have a bitcoin address like
&lt;code&gt;1H7tu2qUAyyr5aX1WA17eyvbetAGyqxfKZ&lt;/code&gt; or
&lt;code&gt;1L3iGYBD5wbiki2SYUT5wmupy4TTgmEBg3&lt;/code&gt;, but suppose you want a bitcoin
address that includes the name of your cat or your birthday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 6.&lt;/strong&gt; Define a function, &lt;code&gt;func
generateVanityAddress(pattern string) (*btcec.PublicKey,
*btcec.PrivateKey)&lt;/code&gt; where &lt;code&gt;pattern&lt;/code&gt; is a regular expression.  It should
return a valid key pair where the corresponding public address &lt;a href=&#34;http://golang.org/pkg/regexp/#MatchString&#34;&gt;matches
the pattern&lt;/a&gt;.&lt;br /&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You should be able to use your function to generate an address that
includes the digits of pi in sequence:
&lt;code&gt;generateVanityAddress(&amp;quot;3.*1.*4.*1.*5.*9.*&amp;quot;)&lt;/code&gt; or contains &lt;code&gt;dave&lt;/code&gt; without
any adjacent letters (&lt;code&gt;generateVanityAddress(&amp;quot;[0-9]dave[0-9]&amp;quot;)&lt;/code&gt;) in its
public bitcoin address.  In deciding how vain you want to be for the
next exercise, think about how the running time scales with the number
of strings that match the target pattern.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;strong&gt;Problem 7.&lt;/strong&gt; Use your &lt;code&gt;generateVanityAddress&lt;/code&gt;
function to create your own vanity address.  Its up to you to decide
what to put in your vanity address, but it should be clear that your
address is not a typical random one.  If you are extra vain, create a
address where your name appears at the beginning (after the initial
&lt;code&gt;1&lt;/code&gt;).  (Note that uppercase &amp;lsquo;O&amp;rsquo; and &amp;lsquo;I&amp;rsquo; and lowercase &amp;lsquo;l&amp;rsquo; are not used
in any address, so if your name includes these letters you will have to
be creative.)&lt;br /&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 8.&lt;/strong&gt;   Is your vanity address more or less secure than the first address you generated?
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;There are on-line services that produce vanity addresses, like
   &lt;a href=&#34;http://bitcoinvanitygen.com/&#34;&gt;http://bitcoinvanitygen.com/&lt;/a&gt;.  You
   should contemplate briefly whether using such a site is &lt;a href=&#34;http://www.reddit.com/r/Bitcoin/comments/21foj9/funds_currently_being_stolen_from_vanity/&#34;&gt;more vain or
   stupid&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;bitcoin-transactions:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Bitcoin Transactions&lt;/h1&gt;

&lt;p&gt;Having an address is not much fun without any funds!&lt;/p&gt;

&lt;p&gt;You should have received some money to the address you submitted in
&lt;a href=&#34;../../ps/ps0/ps0.md&#34;&gt;PS0&lt;/a&gt;.  For these questions, you will need to have
actual money to transfer, so be careful to make small transfers for
these questions in case something goes wrong.  (In the event that you do
lose all of your bitcoin, you can get a new transfer to an adress of
your choosing by explaining to me what you have learned about software
development and or best practices.  It is not necessary to buy your own
bitcoin, even if you lose all of the original transfer.)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;b&gt;Problem 9.&lt;/b&gt; Make a &lt;strong&gt;small&lt;/strong&gt; (e.g., 1 mBTC) transfer from
your wallet address to your vanity address.  You can do this using
your MultiBit wallet.  Find the transaction in the blockchain (you can do this by
searching for your vanity address at
&lt;a href=&#34;https://insight.bitpay.com/&#34;&gt;insight.bitpay.com&lt;/a&gt; or
&lt;a href=&#34;https://blockchain.info/&#34;&gt;blockchain.info&lt;/a&gt;). You will need the
transaction ID for the next exercise.  (For your answer, just provide the transaction ID.)
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Once you have located the transaction that sends bitcoin to your vanity
address you should notice several things.&lt;/p&gt;

&lt;p&gt;Your wallet most likely send bitcoins to your address &lt;em&gt;and&lt;/em&gt; back to a
new address.  We call this second address the &amp;lsquo;change&amp;rsquo; address. Notice
that each output has an ordered position. This index (known as the &lt;code&gt;vout&lt;/code&gt;)
along with the transaction ID lets us uniquely identify transaction
outputs. This is important if you want to use those outputs in a new
transaction.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 10.&lt;/strong&gt; Transfer some bitcoin from your vanity address to someone
else in the class (you can use one of the addresses you identified in
Problem 2). To do this you can run &lt;code&gt;spend.go&lt;/code&gt; in ps1. You can provide
the parameters needed for the transaction at the command line (it is not
necessary to modify the code).
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If done correctly the script should look this when executed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; go run spend.go \
      -privkey &amp;quot;f3942c1e1...87&amp;quot; \
      -toaddress &amp;quot;19WmbY4nDcjAEv6wb5rcd5E6MutVMXBZzy&amp;quot; \
      -txid &amp;quot;9070329c2850d9b1dadeaa8683039b273beb58a27812172e31e397cf19fd5ca0&amp;quot; \
      -vout 0
Here is your raw bitcoin transaction:
0100000001a05cfd19cf97e3312e171278a258eb3b279b038386aadedab1d950289c327090000000006a47304402201d2fd4818cf4f4faa8\
4bbd407e5477c2a3722b137339460ff99c7255ad63bcc802201d991cad02e62d24fb4db2527a456159e069567116a325ee09186061395839\
e901210324594ad7124d0812e060200b66cc5199142e9adc42b0cd0c40f457eac4005d5dffffffff01f78a0100000000001976a9145d624b\
a9f2c55817af8b819ed4aaae55a36e256288ac00000000
The sending api responded with:
{&amp;quot;txid&amp;quot;:&amp;quot;e5f4cb8e3736cab91ff4eb889bc8af659f1d8d398b3f934c8d63871b495d9065&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve left out most of my private key, since posting your private key on
the web is not a very smart thing to do!&lt;/p&gt;

&lt;p&gt;Notice that when the command above is run with these parameters it only
works
&lt;a href=&#34;https://blockchain.info/tx/e5f4cb8e3736cab91ff4eb889bc8af659f1d8d398b3f934c8d63871b495d9065&#34;&gt;once&lt;/a&gt;.
If you try to run it again you should get an API error since the input
transaction has already been spent.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt;&lt;strong&gt;Problem 11.&lt;/strong&gt; The provided &lt;code&gt;spend.go&lt;/code&gt; code
   sends the full amount of the input transaction (less the network fee)
   to the destination address.  Modify the program to add an &lt;code&gt;-amount
   &amp;lt;value&amp;gt;&lt;/code&gt; flag that takes the amount to transfer in satoshi.  If the amount
   available in the specified transaction output (less the network fee) exceeds the
   amount to send, your program should print an error message.
   Otherwise, it should send the requested amount to the toaddress, and
   send the change back to your address.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Try using your modified spending code to send a small amount to another
address, and do another transaction to check that the change you receive
back is still spendable.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;problem&#34;&gt; &lt;b&gt;Problem 12.&lt;/b&gt; (Bonus) Try to double spend the same
bitcoin.  Figure out as much as you can about what happens when the
double spend transactions are attempted.  See if you can get a
transaction to appear on the &lt;a href=&#34;https://blockchain.info/double-spends&#34;&gt;list of double
spends&lt;/a&gt;.  See how close you can get to obtaining two verified
transactions spending the same coin (e.g., can you achieve two
transactions with at least one confirmation each?)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Please don&amp;rsquo;t try to actually rip anyone off; only attempt double
spending with your own addresses (or those of willing classmates).  You
are not expected to actually be able to double-spend successfully (if
this were easy, bitcoin would not work well as a currency!), but should
be able to learn something by attemting to do this.&lt;/p&gt;

&lt;h3 id=&#34;submission-1:939ea9b9cc2ea0226c5f2d7200883cc7&#34;&gt;Submission&lt;/h3&gt;

&lt;p&gt;Follow the submission instructions at the beginning of this page by
8:29pm on Tuesday, 15 September.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Github</title>
      <link>http://bitcoin-class.org/tools/github/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/tools/github/</guid>
      <description>

&lt;h1 id=&#34;getting-started-with-github:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;Getting Started with Github&lt;/h1&gt;

&lt;p&gt;For this course you will need to use &lt;a href=&#34;http://github.com&#34;&gt;github&lt;/a&gt; to
manage your code and submit your assignments.  &lt;a href=&#34;http://gitscm.com/&#34;&gt;Git&lt;/a&gt;
is a widely used version control system originally developed by Linus
Torvalds for use in managing development of the Linux operating system
kernel.  Github is company that provides free web-hosting for git
repositories.&lt;/p&gt;

&lt;p&gt;Follow the instructions below to get started using git and set up the
repository you will use for this class (we&amp;rsquo;ll talk more about git in
class, but this should be enough to get started):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Register for a student github account: &lt;a href=&#34;https://github.com/edu&#34;&gt;https://github.com/edu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: you need to do this even if you already have a public github
  account, unless you have a paid account to support non-public
  repositories.  With the student account, you will be able to have
  non-public repositories for free.&lt;/p&gt;

&lt;p&gt;You will need to verify your email address (which must be a .edu
  address), and then go back to the
  &lt;a href=&#34;https://github.com/edu&#34;&gt;https://github.com/edu&lt;/a&gt; page to fill in a
  form to request a student account.  You should then receive a
  &amp;ldquo;Powerup get!&amp;rdquo; message from github, and be able to create private
  repositories with your account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up git on the machine you will use for course assignments. Follow the instructions here:
  &lt;a href=&#34;https://help.github.com/articles/set-up-git&#34;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;.
  Follow the instructions to download and install a git client for your OS
  (&lt;a href=&#34;http://mac.github.com/&#34;&gt;Mac&lt;/a&gt;,
  &lt;a href=&#34;http://windows.github.com/&#34;&gt;Windows&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;using-git-for-ccc:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;Using git for CCC&lt;/h1&gt;

&lt;p&gt;For some of the assignments in this course, we will provide starting
code in a git repository and you will need to use separate private
repository for each assignment.  (After the assignment is due, you can
make this repository public, both to share it as you wish, and to free
up another private repository since the number of private repositories
you get with your free education account is limited.)&lt;/p&gt;

&lt;p&gt;Typically, you need to fetch the code skeleton from the respective
public repository of the course every time before you start working.&lt;/p&gt;

&lt;p&gt;The general process of working on projects is to (we&amp;rsquo;ll go through each
step in detail below):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a private repository on github.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clone&lt;/strong&gt; the repository, so you have a local working copy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the code skeleton from the course repo, merge it into your
working copy, and push to the main repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit code and text files in your local copy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt; the local changes to the main repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you do the assignment, you should commit and push your changes regularly.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-repository:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;Setting up the Repository&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take &lt;a href=&#34;http://bitcoin-class.org/ps/ps1/&#34;&gt;PS1&lt;/a&gt; as an example. Here&amp;rsquo;s what you should do.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1. Create a new repository named &lt;code&gt;ps1&lt;/code&gt;.&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://github.com/repositories/new&#34;&gt;https://github.com/repositories/new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;Private&amp;rdquo; for the type of repository.  (If you got a student discount correctly, this should be available for free.  If it asks you for
      a credit card, go back to step 1 of &lt;a href=&#34;|filename|github.md&#34;&gt;setting up github&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Keep the &amp;ldquo;Initialize this repository with a README&amp;rdquo; unchecked, since you will fetch it later from a public repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;2. Clone the empty private repository to your working
environment.&lt;/b&gt; Instead of &lt;em&gt;mygithubname&lt;/em&gt; below, use your github
username.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git clone https://github.com/mygithubname/ps1.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven&amp;rsquo;t set up SSH keys for github, you&amp;rsquo;ll need to enter your
github username and password.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3. Fetch the code skeleton from the course repository to your private
repository.&lt;/b&gt; Enter the working directory of your empty repository and
add a remote repository named &lt;code&gt;starting&lt;/code&gt;, merge the code, and push it to
your private repository by executing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git remote add starting git@github.com:CryptoCurrencyCabal/ps1.git
git pull starting master
git push --tags origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;working-with-files:93ed8abeb42c248f3c551d1cb44159d4&#34;&gt;Working with Files&lt;/h2&gt;

&lt;p&gt;Now you can write your own code in editor and save it to files. You can see what files have changed by running:
&lt;code&gt;git status&lt;/code&gt;.  You should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
# On branch master
# Untracked files:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
#
#   break_daves_key.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, nothing has been added to commit but untracked files
are present.&lt;/p&gt;

&lt;p&gt;To add the files to the main repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git add break_daves_key.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should try running &lt;code&gt;git status&lt;/code&gt; again to see the files that will be
committed.  Note that add stages the file in its current state!  If you
modify the file after the add, the version of the file when you did the
add is the version that will be committed.&lt;/p&gt;

&lt;p&gt;Then,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commits the staged files to the main repository.  This will launch and
editor for you to enter a commit message.  You can use &lt;code&gt;-m&lt;/code&gt; to provide a
message at the command line instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git commit -m &#39;I am no longer afraid of commitment!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your actual commit messages you use should be &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;useful&lt;/strong&gt;.
It is tempting to use &lt;a href=&#34;http://whatthecommit.com/&#34;&gt;lazy commit message&lt;/a&gt;,
but you will regret this as your projects get more complex and code
breaks in mysterious ways.&lt;/p&gt;

&lt;p&gt;If you want to skip the two-stage commit, you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git commit -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to automatically add all new and changed files to the commit.&lt;/p&gt;

&lt;p&gt;At this point, the changes are stored in your local repository, but not
yet in the main repository.  Once you have changes you want to push to
the main repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::text
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, all the changes are now pushed to the main repository at
github.  Visit your repository in github to see the result.&lt;/p&gt;

&lt;p&gt;This seems like a lot of steps, but by providing a full local repository
and making the steps of staging and pushing to the remote repository
explicit, git provides developers with a lot of control over
repositories that becomes very useful when several (or many) developers
are working on the same project and trying to combine each others
changes (or recover from mistakes).&lt;/p&gt;

&lt;p&gt;There are many resources for learning more about git.  The free book,
&lt;a href=&#34;http://git-scm.com/book/en/&#34;&gt;Pro Git&lt;/a&gt; by Scott Chacon is recommended.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://bitcoin-class.org/classes/class8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/bitcoin/bitcoin/blob/master/src/miner.cpp&#34;&gt;BitcoinMiner&lt;/a&gt; (code from core Bitcoin implementation)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//
// ScanHash scans nonces looking for a hash with at least some zero bits.
// The nonce is usually preserved between calls, but periodically or if the
// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at
// zero.
//
bool static ScanHash(const CBlockHeader *pblock, uint32_t&amp;amp; nNonce, uint256 *phash)
{
    // Write the first 76 bytes of the block header to a double-SHA256 state.
    CHash256 hasher;
    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);
    ss &amp;lt;&amp;lt; *pblock;
    assert(ss.size() == 80);
    hasher.Write((unsigned char*)&amp;amp;ss[0], 76);

    while (true) {
        nNonce++;

        // Write the last 4 bytes of the block header (the nonce) to a copy of
        // the double-SHA256 state, and compute the result.
        CHash256(hasher).Write((unsigned char*)&amp;amp;nNonce, 4).Finalize((unsigned char*)phash);

        // Return the nonce if the hash has at least some zero bits,
        // caller will check if it has enough to reach the target
        if (((uint16_t*)phash)[15] == 0)
            return true;

        // If nothing found after trying for a while, return -1
        if ((nNonce &amp;amp; 0xfff) == 0)
            return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bitcoin/bitcoin/blob/master/src/miner.cpp#L438&#34;&gt;BitcoinMiner&lt;/a&gt;: (excerpted, most error checking code removed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void static BitcoinMiner(CWallet *pwallet)
{
    SetThreadPriority(THREAD_PRIORITY_LOWEST);
    CReserveKey reservekey(pwallet);
    unsigned int nExtraNonce = 0;

    try {
        while (true) {
            // Create new block
            unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();
            CBlockIndex* pindexPrev = chainActive.Tip();

            auto_ptr&amp;lt;CBlockTemplate&amp;gt; pblocktemplate(CreateNewBlockWithKey(reservekey));
            CBlock *pblock = &amp;amp;pblocktemplate-&amp;gt;block;
            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);

            int64_t nStart = GetTime();
            arith_uint256 hashTarget = arith_uint256().SetCompact(pblock-&amp;gt;nBits);
            uint256 hash;
            uint32_t nNonce = 0;
            while (true) {
                // Check if something found
                if (ScanHash(pblock, nNonce, &amp;amp;hash))
                {
                    if (UintToArith256(hash) &amp;lt;= hashTarget)
                    {
                        // Found a solution
                        pblock-&amp;gt;nNonce = nNonce;
                        assert(hash == pblock-&amp;gt;GetHash());

                        SetThreadPriority(THREAD_PRIORITY_NORMAL);
                        LogPrintf(&amp;quot;proof-of-work found  \n  hash: %s  \ntarget: %s\n&amp;quot;, 
	                          hash.GetHex(), hashTarget.GetHex());
                        ProcessBlockFound(pblock, *pwallet, reservekey);
                        SetThreadPriority(THREAD_PRIORITY_LOWEST);
                        break;
                    }
                }

                if (nNonce &amp;gt;= 0xffff0000) break;
                // ... other breaking conditions elided
                // Update nTime every few seconds
                UpdateTime(pblock, pindexPrev);
            }
        }
    }
    catch (const boost::thread_interrupted&amp;amp;)
    {
        LogPrintf(&amp;quot;BitcoinMiner terminated\n&amp;quot;);
        throw;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Registration</title>
      <link>http://bitcoin-class.org/registration/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/registration/</guid>
      <description>

&lt;h1 id=&#34;course-registration:38a8983f478dea556d71617301415c7f&#34;&gt;Course Registration&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;due&#34;&gt;
Due: 8:29pm on Saturday, 29 August
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;To register for the course, you need to &lt;strong&gt;setup a bitcoin wallet&lt;/strong&gt; (so
don&amp;rsquo;t wait until the last minute to do this).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://multibit.org/&#34;&gt;MultiBit HD&lt;/a&gt; is a good choice for this.  See
&lt;a href=&#34;https://bitcoin.org/en/choose-your-wallet&#34;&gt;https://bitcoin.org/en/choose-your-wallet&lt;/a&gt;
for information on bitcoin wallets.  Be aware that you probably do not
have time to download the full blockchain before this assignment is due,
so need to use a &lt;em&gt;lightweight wallet&lt;/em&gt; (we will learn what this means
later in the class).&lt;/p&gt;

&lt;p&gt;After creating a wallet, you should find the &lt;em&gt;Recieving Address&lt;/em&gt; which
you will need for one of the questions.  If you used MultiBit HD, you
will see this by clicking &amp;ldquo;Request&amp;rdquo; (to request payment), and copy the
&amp;ldquo;Recipient Address&amp;rdquo;.  It should be a string like,
&lt;code&gt;19WmbY4nDcjAEv6wb5rcd5E6MutVMXBZzy&lt;/code&gt;.  Note that your wallet may create
several recipient addresses, so you won&amp;rsquo;t see the same address each time
you do this.&lt;/p&gt;

&lt;p&gt;It is not necessary now, or at any time during this class, for you to
actually buy bitcoins with your own money.  If you are inclined to do
this, be careful, and don&amp;rsquo;t use any funds you cannot afford to lose!&lt;/p&gt;

&lt;p&gt;Submit the form below (also avaible as &lt;a href=&#34;https://docs.google.com/forms/d/1taP-16YrkyfNMjZxDkz5dF3BTaFd5wrDdIcZPq7OYmE/viewform?usp=send_form&#34;&gt;direct link&lt;/a&gt;):&lt;/p&gt;

&lt;iframe src=&#34;https://docs.google.com/forms/d/1taP-16YrkyfNMjZxDkz5dF3BTaFd5wrDdIcZPq7OYmE/viewform?embedded=true&#34; width=&#34;760&#34; height=&#34;800&#34; frameborder=&#34;0&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34;&gt;Loading...&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>http://bitcoin-class.org/syllabus/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/syllabus/</guid>
      <description>

&lt;h1 id=&#34;syllabus:051025d606153e159a2b11ffecb897d5&#34;&gt;Syllabus&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Meetings:&lt;/strong&gt; Mondays and Wednesdays, 2:00-3:15pm in Olsson 120.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teachers:&lt;/strong&gt; &lt;a href=&#34;http://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt; and &lt;a href=&#34;http://www.cs.virginia.edu/~sza4uq/&#34;&gt;Samee
  Zahur&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Assistant:&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/pub/ori-shimony/b7/913/665&#34;&gt;Ori Shimony&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Office Hours:&lt;/strong&gt; Mondays 5-6:30pm (Ori, Rice 442); Wednesdays 3:15-4:30pm (Samee, Rice 442); Thursdays 2:30-3:30pm (Dave, Rice 507).  Office hours will be updated on the &lt;a href=&#34;https://www.google.com/calendar/embed?src=rmjagdrnmu3a9h2q5199lg4t28%40group.calendar.google.com&amp;amp;ctz=America/New_York&#34;&gt;course calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Site:&lt;/strong&gt; &lt;a href=&#34;http://bitcoin-class.org&#34;&gt;http://bitcoin-class.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;hanging&#34;&gt; &lt;strong&gt;Readings:&lt;/strong&gt; We will not follow a textbook
closely, but will have several readings from two books (both of which
are freely available):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Andreas M. Antonopoulos,
&lt;a href=&#34;https://github.com/aantonop/bitcoinbook&#34;&gt;&lt;em&gt;Mastering Bitcoin: Unlocking Digital
Cryptocurrencies&lt;/em&gt;&lt;/a&gt;.  (You can
use the free version of the book available at
&lt;a href=&#34;https://github.com/aantonop/bitcoinbook&#34;&gt;https://github.com/aantonop/bitcoinbook&lt;/a&gt;,
but would probably benefit from buying the &lt;a href=&#34;http://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Crypto-Currencies/dp/1449374042&#34;&gt;printed
version&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller, Steven
Goldfeder. &lt;a href=&#34;https://piazza.com/princeton/spring2015/btctech/resources&#34;&gt;&lt;em&gt;Bitcoin and Cryptocurrency
Technologies&lt;/em&gt;&lt;/a&gt;.
This is a new book under development by a team at Princeton University.
(There are also lecture videos and slides that correspond to the book.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to those books, we will have several readings from both
general audience publications, technical documents, and research papers.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview:051025d606153e159a2b11ffecb897d5&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;For the past 10,000 years, humans have been seeking better ways to store
and transfer value.  &lt;em&gt;Cryptocurrencies&lt;/em&gt; (most notably bitcoin), provide
a way to do this using bits alone without any centralized authority.  In
this course, we will learn about the cryptographic foundations for
cryptocurrencies; networking, software, hardware, and security issues
relevant to designing and implementing a cryptocurrency, and consider
the economic, legal, and political issues raised by cryptocurrencies.&lt;/p&gt;

&lt;h2 id=&#34;expected-background:051025d606153e159a2b11ffecb897d5&#34;&gt;Expected Background&lt;/h2&gt;

&lt;p&gt;Students entering this course are expected to be comfortable reading,
designing, and writing complex programs that involve thousands of lines
of code distributed over many modules.  You should be fairly comfortable
with math, at least enough to analyze probabilities.&lt;/p&gt;

&lt;p&gt;You should be comfortable learning how to use a new programming language
features and APIs by reading their documentation (or source code when no
documentation is available), and not be surprised when you are expected
to learn a new language on your own or to seek documentation beyond what
was provided in class.&lt;/p&gt;

&lt;p&gt;Students are &lt;strong&gt;not expected&lt;/strong&gt; to have significant previous experience with
cryptography (although such background will certainly be helpful).&lt;/p&gt;

&lt;p&gt;Some specific things we expect of students entering this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should have some experience programming in at least one
programming language, and not be afraid of needing to learn new
languages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You have written at least one program with over 1000 lines of code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should understand basic probability and be able to figure out
things like the probability that 100 tosses of a fair coin do not
result in any tails.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should understand at least as much about complexity and
computability as is covered in &lt;a href=&#34;http://dori-mic.org&#34;&gt;&lt;em&gt;Dori-Mic and the Universal
Machine&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should find computing exciting and delighting, and believe you can
use computing to make the world a better place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you do not satisfy any of these expectations, that doesn&amp;rsquo;t mean you
cannot take the class, but you need to let one of the course teachers
know about it at the beginning of the semester.&lt;/p&gt;

&lt;h2 id=&#34;honor-pledge:051025d606153e159a2b11ffecb897d5&#34;&gt;Honor Pledge&lt;/h2&gt;

&lt;p&gt;This course focuses on how to establish trust among distrusting people
using mathematics, computing, and networking.  As a student at
Mr. Jefferson&amp;rsquo;s University, you are intrinsically trusted.&lt;/p&gt;

&lt;p&gt;We take advantage of this trust to provide a better learning environment
for everyone.  In particular, students in this class are expected to
follow these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;I will not lie, cheat or steal.&lt;/b&gt; If I am unsure whether something
would be considered lying, cheating or stealing, I will ask before doing
it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;I will carefully read and follow the collaboration policy on each
assignment.&lt;/b&gt; I will not abuse resources, including any submissions or
solutions for assignments from last semester&amp;rsquo;s version of this course,
that would be clearly detrimental to my own learning.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the honor rules, students in this class are also expected
to follow these behaviors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;I will do what I can to help my fellow classmates learn.&lt;/b&gt; &lt;em&gt;Except
when specifically instructed not to&lt;/em&gt;, this means when other students ask
me for help, I will attempt to provide it. I will look at their answers
and discuss what I think is good or bad about their answers. I will help
others improve their work, but will not give them my answers directly. I
will try to teach them what they need to know to discover solutions
themselves.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;I will ask for help.&lt;/b&gt; I will make a reasonable effort to do things
on my own first (or with my partners for group assignment), but will ask
my classmates or the course staff for help before getting overly
frustrated.  There are many ways to ask for help including the course
website and office hours.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;I grant the course staff permission to reproduce and distribute
excerpts from my submissions for teaching purposes.&lt;/b&gt; If may opt-out
of this by adding a comment to your code, but without an explicit
opt-out comment we assume you agree to it.  Excerpts will be used
anonymously when illustrating a misunderstanding or common problem, and
with credit when showing an interesting or exemplary answer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;I will not invest money I cannot afford to lose in
cryptocurrencies.&lt;/b&gt; The main topic of this course is cryptocurrencies,
and students will be encouraged to gain experience using bitcoin to
conduct real transactions (but will not be expected to spend any
personal money on bitcoin).  Please be aware that bitcoin is very
volatile, and that you could lose all the money in your bitcoin wallet
if you make a programming error or lose your key. It would be foolish
and reckless to convert any money you would be upset about losing into a
cryptocurrency.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;I will provide useful feedback.&lt;/b&gt; I realize that this is a new and
experimental course, and it is important that I let the course staff
know what they need to improve the course. I will not wait until the
end of the course to make the course staff aware of any problems. I
will provide feedback either anonymously or by contacting the course
staff directly. &lt;b&gt;I will fill out all requested surveys honestly and
thoroughly&lt;/b&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;assignments:051025d606153e159a2b11ffecb897d5&#34;&gt;Assignments&lt;/h2&gt;

&lt;p&gt;The course will have one midterm, four problem sets, one final project,
and a (discretionary) final exam.  In addition, there will be several
check-ups (short tests in class, with opportunities to revise and
improve answers after discussion) and short assignments that may involve
reading assignments and posting answers and questions on the course
website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exams.&lt;/strong&gt; The midterm is Monday, 19 October.  The final exam is
scheduled for Friday, 11 December (2-5pm).  This time will be used to
schedule short oral exams for students who have not already demonstrated
strong understanding of the course topics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Sets.&lt;/strong&gt; The problem sets will involve writing programs and
solving problems to understand transactions in bitcoin (Problem Set 1),
bitcoin nodes and mining (Problem Set 2), blockchain analysis (Problem
Set 3), and alternate cryptocurrencies (Problem Set 4).  For most of
these assignments, you will be encouraged to work with one or two other
people in a small team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Project.&lt;/strong&gt; For the final project, you are free to work on
anything relevant to cryptocurrencies.  Some suggestions for project
ideas will be posted on the course website.  Students who have ambitious
ideas for a project may be able to arrange with the course staff to
expand the project to substitute for other assignments (such as Problem
Set 4).&lt;/p&gt;

&lt;h2 id=&#34;schedule:051025d606153e159a2b11ffecb897d5&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;A tenative and (continually) updated schedule is available as a &lt;a href=&#34;https://www.google.com/calendar/embed?src=rmjagdrnmu3a9h2q5199lg4t28%40group.calendar.google.com&amp;amp;ctz=America/New_York&#34;&gt;Google
calendar&lt;/a&gt;.
(You can view this calendar on the course site, or incorporate in as
iCal calendar into your own calendar using &lt;a href=&#34;https://www.google.com/calendar/ical/rmjagdrnmu3a9h2q5199lg4t28%40group.calendar.google.com/public/basic.ics&#34;&gt;this
link&lt;/a&gt;.
Except when noted otherwise, assignments are due at &lt;b&gt;8:29pm&lt;/b&gt; on the
due date.&lt;/p&gt;

&lt;p&gt;The main expected due dates: &lt;font color=&#34;red&#34;&gt;(updated 20 September 2015, see &lt;a href=&#34;https://web.archive.org/web/20150921010439/http://bitcoin-class.org/syllabus/&#34;&gt;archived version&lt;/a&gt; for original)&lt;/font&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saturday, 29 August: &lt;strong&gt;Registration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Monday, 7 September: &lt;strong&gt;Checkup 1&lt;/strong&gt; (in class)&lt;/li&gt;
&lt;li&gt;Tuesday, 15 September: &lt;strong&gt;Problem Set 1: Bitcoin Transactions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Wednesday, 23 September: &lt;strong&gt;Checkup 2&lt;/strong&gt; (in class)&lt;/li&gt;
&lt;li&gt;Friday, 9 October: &lt;strong&gt;Problem Set 2: Blockchain&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Monday, 19 October: &lt;strong&gt;Midterm Exam&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuesday, 27 October: &lt;strong&gt;Problem Set 3: Blockchain Analysis&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuesday, 17 November: &lt;strong&gt;Problem Set 4: Alternate Cryptocurrencies&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sunday, 22 November: &lt;strong&gt;Project Proposal&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Monday, 7 December: Last class&lt;/li&gt;
&lt;li&gt;Friday, 11 December: &lt;strong&gt;Final Exam&lt;/strong&gt; (discretionary)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dates shown here are subject to change based on how the semester
progresses, but with ample warning.&lt;/p&gt;

&lt;h2 id=&#34;grading:051025d606153e159a2b11ffecb897d5&#34;&gt;Grading&lt;/h2&gt;

&lt;p&gt;We prefer to spend our time focused as much as possible on &lt;em&gt;teaching&lt;/em&gt;,
and as little as possible on &lt;em&gt;grading&lt;/em&gt;.  The assignments in this class
are designed to maximize &lt;em&gt;learning&lt;/em&gt;, rather than primarily for
&lt;em&gt;assessment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That said, we understand that students do need to be assigned grades at
the end of the semester, and sometimes grades can be a powerful and
effective motivator as well as a useful way to measure progress and
understanding.&lt;/p&gt;

&lt;p&gt;Grades will be determined based on your performance on all the class
assignments and class contributions (including postings on the course
site).  Some assignments may be graded by randomly looking at selected
answers, rather than reading everything submitted.&lt;/p&gt;

&lt;p&gt;There is no set weighting among these things, and in general, if there
is some combination of the above that demonstrates that you have gotten
what we hope out of the class then you will receive an A grade.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Checkup 1 Comments</title>
      <link>http://bitcoin-class.org/announcements/checkup1/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/announcements/checkup1/</guid>
      <description>

&lt;p&gt;Here are answers and discussions for the Checkup 1 questions.  It would
not be at all surprising if there are one or two questions on Checkup 2
(scheduled for Wednesday, Sept 23) that are closely related to questions
on Checkup 1.&lt;/p&gt;

&lt;h4 id=&#34;1-what-are-the-most-essential-properties-something-must-have-to-be-used-as-a-currency:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;1. What are the most essential properties something must have to be used as a currency?&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
The two most essential properties are
&lt;em&gt;transferability&lt;/em&gt; and &lt;em&gt;scarcity&lt;/em&gt;.  Recall that we defined a currency as
a &amp;ldquo;medium of exchange&amp;rdquo;.  In order for something to be used in exchanges,
it must be possible to transfer it from one owner to another.  The
second essential property of scarcity is intrinsic to having value.  If
something can be created or duplicated freely, it cannot be used to
represent value.&lt;/p&gt;

&lt;p&gt;Being &lt;em&gt;universally recognized as valuable&lt;/em&gt; would be a
good alternative answer to &lt;em&gt;scarcity&lt;/em&gt;, but is a bit circular: nothing is
&amp;ldquo;universally&amp;rdquo; recognized as valuable for the entire universe; it is
universally recognized as valuable by all partcipants in an economy
using that currency, but this is a somewhat circular definition (of
universal).&lt;/p&gt;

&lt;p&gt;Other properties that were often mentioned, but are not essential for
something to be a currency include &lt;em&gt;stable&lt;/em&gt; (it is good in most cases is
a currency holds it value over time, but note that prefect stability is
generally not considered a good thing, and inflation rates should not be
zero for a well-functioning economy); &lt;em&gt;anonymous&lt;/em&gt; (some people consider
this desirable, but others view it as a negative; it is certainly not
essential for an effective currency); &lt;em&gt;decentralized&lt;/em&gt; (this is what
distinguished bitcoin from other currencies, but essentially all other
currencies used in the history of humanity have been centralized); and
&lt;em&gt;divisible&lt;/em&gt; (important for many transactions).
   &lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-what-are-the-drawbacks-of-using-a-centralized-bank-to-record-transactions:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;2. What are the drawbacks of using a centralized bank to record transactions?&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
The biggest problem is that it requires placing a large amount of trust
the bank.  The bank can decide what transactions happened, and can
decide who owns what (including, deciding that the bank owns everything).&lt;/p&gt;

&lt;p&gt;Another problem with relying on a single, centralized entity is that
even if that entity is not malicious, it could still be &amp;ldquo;incompetent&amp;rdquo; -
if the bank is off-line, it is impossible to execute a transaction
(i.e., this is what happens when you try and use a credit card and the
merchant can&amp;rsquo;t connect to the system to do the transaction), and if the
bank loses the transaction record everything is lost.
   &lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-where-is-asymmetric-cryptography-used-in-a-bitcoin-wallet:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;3. Where is asymmetric cryptography used in a bitcoin wallet?&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
The most important place is to sign transactions.  It is necessary to
use the private key associated with public address A to sign a
transaction that transfers a coin owned by A to another address.&lt;/p&gt;

&lt;p&gt;The wallet is also using asymmetric cryptography to verify a transaction
(checking that a transaction that trasfers coin to your wallet is signed
by the appropriate private key using the public key corresponding to the
bitcoin address of the sender).
   &lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-find-span-class-math-x-span-such-that-span-class-math-2-sup-x-sup-mod-7-1-span:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;4. Find &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;2&lt;sup&gt;&lt;em&gt;x&lt;/em&gt;&lt;/sup&gt; mod 7 = 1&lt;/span&gt;.&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
The simplest answer is &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt; = 3&lt;/span&gt; since &lt;span class=&#34;math&#34;&gt;2&lt;sup&gt;3&lt;/sup&gt; = 8 mod 7 = 1&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Any value &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt; mod 6 = 3&lt;/span&gt; satisfies the equation.  For example, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt; = 9&lt;/span&gt; also works since &lt;span class=&#34;math&#34;&gt;2&lt;sup&gt;9&lt;/sup&gt; = 512 mod 7 = 1&lt;/span&gt;.&lt;br /&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-the-problem-in-the-previous-question-is-an-instance-of-the-discrete-logarithm-problem-why-do-cryptographers-consider-discrete-logarithm-to-be-a-hard-problem:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;5. The problem in the previous question is an instance of the &lt;em&gt;discrete logarithm problem&lt;/em&gt;.  Why do cryptographers consider discrete logarithm to be a &lt;em&gt;hard&lt;/em&gt; problem?&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
Computer scientists consider a problem to be
&lt;em&gt;hard&lt;/em&gt; if there is no known algorithm that solves the problem with
resources that scale as a polynomial in the size of the problem
instance.  Discrete log is (currently) considered a hard problem because
the best known solutions are asymptotically not much better than trying
all possibilities until you find an input that works (that is, doing a
brute force search).  For a large enough input, the time expect to solve
a discrete problem can be made prohibative (given assumptions based on
what is known today).
   &lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-alice-owns-coin-em-x-em-and-has-public-private-key-pair-em-ku-sub-a-sub-em-em-kr-sub-a-sub-em-bob-has-public-private-key-pair-em-ku-sub-b-sub-em-em-kr-sub-b-sub-em-for-the-strong-asymmetric-cryptosystem-e-the-notation-em-e-sub-k-sub-m-em-denotes-the-encryption-of-input-em-m-em-with-key-em-k-em-what-message-should-alice-send-to-the-public-ledger-to-transfer-em-x-em-to-bob:e149e2b552c6d9eb1457244b9601e8b3&#34;&gt;6. Alice owns coin &lt;em&gt;X&lt;/em&gt; and has public/private key pair (&lt;em&gt;KU&lt;sub&gt;A&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;KR&lt;sub&gt;A&lt;/sub&gt;&lt;/em&gt;); Bob has public/private key pair (&lt;em&gt;KU&lt;sub&gt;B&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;KR&lt;sub&gt;B&lt;/sub&gt;&lt;/em&gt;) for the strong asymmetric cryptosystem &lt;em&gt;E&lt;/em&gt; (the notation &lt;em&gt;E&lt;sub&gt;K&lt;/sub&gt;(m)&lt;/em&gt; denotes the encryption of input &lt;em&gt;m&lt;/em&gt; with key &lt;em&gt;K&lt;/em&gt;).  What message should Alice send to the public ledger to transfer &lt;em&gt;X&lt;/em&gt; to Bob?&lt;/h4&gt;

&lt;p&gt;&lt;div class=&#34;answer&#34;&gt;
The message needs to be something (1) only Alice could generate and (2)
everyone can verify as transferring the coin to Bob.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;msg&lt;/em&gt; = &amp;ldquo;I, KU&lt;sub&gt;A&lt;/sub&gt; (Alice), transfer coin &lt;em&gt;X&lt;/em&gt; to KU&lt;sub&gt;B&lt;/sub&gt; (Bob)&amp;rdquo;&lt;br /&gt;
Send to ledger the message signed by Alice: (&lt;em&gt;msg&lt;/em&gt;, E&lt;sub&gt;KR&lt;sub&gt;A&lt;/sub&gt;&lt;/sub&gt;(&lt;em&gt;msg&lt;/em&gt;))
   &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 7: The Blockchain</title>
      <link>http://bitcoin-class.org/classes/class7/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class7/</guid>
      <description>

&lt;h2 id=&#34;schedule:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
&lt;strong&gt;Wednesday, September 23&lt;/strong&gt;: Checkup 2 (was originally scheduled for Monday, September 21)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readings&lt;/strong&gt; (should be completed by Monday, September 21 at the latest; covered by Checkup 2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Satoshi Nakamoto, &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash
System&lt;/em&gt;&lt;/a&gt;, 2008.  The is the original
bitcoin paper, which is quite readable and historically interesting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch06.asciidoc&#34;&gt;&lt;em&gt;Chapter 6: The Bitcoin
Network&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch07.asciidoc&#34;&gt;&lt;em&gt;Chapter 7: The
Blockchain&lt;/em&gt;&lt;/a&gt;
from Andreas Antonopoulos&amp;rsquo; book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_2.pdf&#34;&gt;&lt;em&gt;Chapter 2: How Bitcoin Achieves
Decentralization&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_5.pdf&#34;&gt;&lt;em&gt;Chapter 5: Bitcoin
Mining&lt;/em&gt;&lt;/a&gt;
from Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller,
Steven Goldfeder. &lt;a href=&#34;https://piazza.com/princeton/spring2015/btctech/resources&#34;&gt;&lt;em&gt;Bitcoin and Cryptocurrency
Technologies&lt;/em&gt;&lt;/a&gt;.
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/uCjusmzjkpfLzr&#34;
width=&#34;625&#34; height=&#34;400&#34; frameborder=&#34;2&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;caption&#34;&gt;
Note: ink markings may not appear in the
embedded viewer.  To see them, &lt;a href=&#34;http://bitcoin-class.org/classes/class7-post.pptx&#34;&gt;download the slides&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;blockchain-in-the-news:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Blockchain in the News&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ft.com/cms/s/0/f358ed6c-5ae0-11e5-9846-de406ccb37f2.html&#34;&gt;&lt;em&gt;Blockchain initiative backed by 9 large investment banks&lt;/em&gt;&lt;/a&gt;, Financial Times, 15 Sept 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://recode.net/2015/09/15/nine-of-the-worlds-biggest-banks-form-blockchain-partnership/&#34;&gt;&lt;em&gt;Nine of the World’s Biggest Banks Form Blockchain Partnership&lt;/em&gt;&lt;/a&gt;, Re/Code, 15 Sept 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forbes.com/sites/mikemontgomery/2015/09/15/bitcoin-is-only-the-beginning-for-blockchain-technology/&#34;&gt;&lt;em&gt;Bitcoin Is Only The Beginning For Blockchain Technology&lt;/em&gt;&lt;/a&gt;, Forbes, 15 Sept 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forbes.com/sites/laurashin/2015/09/09/bitcoins-shared-ledger-technology-moneys-new-operating-system/&#34;&gt;&lt;em&gt;Bitcoin&amp;rsquo;s Shared Ledger Technology: Money&amp;rsquo;s New Operating System&lt;/em&gt;&lt;/a&gt;, Forbes, 9 Sept 2015.&lt;/p&gt;

&lt;h1 id=&#34;trust:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Trust&lt;/h1&gt;

&lt;p&gt;What are valid sources of &lt;em&gt;trust&lt;/em&gt;?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What are potentially misleading sources of &lt;em&gt;trust&lt;/em&gt;?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What mechanisms have humans evolved or constructed to enhance trust among strangers?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;distributed-consensus:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Distributed Consensus&lt;/h1&gt;

&lt;p&gt;How well does the 2-out-of-3 network consensus public ledger protocol work?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;proof-of-work:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Proof-of-Work&lt;/h1&gt;

&lt;p&gt;Cynthia Dwork and Moni Naor.  &lt;a href=&#34;http://bitcoin-class.org/0/classes/class6/pvp.pdf&#34;&gt;&lt;em&gt;Pricing via Processing or Combatting Junk Mail&lt;/em&gt;&lt;/a&gt;, CRYPTO 1992.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing Function&lt;/strong&gt;: (&lt;span class=&#34;math&#34;&gt;&lt;em&gt;f&lt;/em&gt;&lt;/span&gt;)
- moderately easy to compute
- cannot be amortized
- computing &lt;span class=&#34;math&#34;&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;), &amp;hellip;, &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;l&lt;/sub&gt;)&lt;/span&gt; costs &lt;span class=&#34;math&#34;&gt;&lt;em&gt;l&lt;/em&gt;&lt;/span&gt; times as much as computing &lt;span class=&#34;math&#34;&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;i&lt;sub&gt;)&lt;/span&gt;.
- easily verified: given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt; easy to check &lt;span class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Adam Back. &lt;a href=&#34;http://www.hashcash.org/papers/announce.txt&#34;&gt;&lt;em&gt;Hash Cash Postage Implementation&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interactive Hashcash&lt;/strong&gt;:&lt;br /&gt;
1. Sender to Receiver: &lt;code&gt;Hello&lt;/code&gt;&lt;br /&gt;
2. Receiver to Sender: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; (random nonce)&lt;br /&gt;
3. Sender to Receiver: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, &lt;code&gt;Mail&lt;/code&gt; where &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt;.&lt;br /&gt;
4. Receiver verifies &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;How well does this protocol work for sending mail?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;How can we make this protocol non-interactive?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;bitcoin-mining:3a08b95a8ad598832d09afa687b9b147&#34;&gt;Bitcoin Mining&lt;/h1&gt;

&lt;p&gt;Proof-of-work: Find an &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that: SHA-256(SHA-256(&lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; + &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;)) &amp;lt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;T&lt;/em&gt;/&lt;em&gt;d&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;math&#34;&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt; is the &amp;ldquo;difficulty&amp;rdquo; (varies).&lt;br /&gt;
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;T&lt;/em&gt;&lt;/span&gt; is a fixed target (256-bit number).&lt;br /&gt;
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; depends on hash of previous block, transactions, and other information.&lt;/p&gt;

&lt;p&gt;What does it mean for the bitcoin difficulty to go down?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 6: Hash Functions</title>
      <link>http://bitcoin-class.org/classes/class6/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class6/</guid>
      <description>

&lt;h2 id=&#34;schedule:647dbe1e5b68015679492d34153c74f5&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
&lt;strong&gt;Tuesday, September 15&lt;/strong&gt; (8:29pm, tomorrow): &lt;a href=&#34;http://www.bitcoin-class.org/ps/ps1&#34;&gt;Problem Set 1&lt;/a&gt; due.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wednesday, September 23&lt;/strong&gt;: Check 2 (was originally scheduled for Monday, September 21)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readings for next week&lt;/strong&gt; (should be completed by Monday, September 21 at the latest, but earlier is better):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Satoshi Nakamoto, &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash
System&lt;/em&gt;&lt;/a&gt;, 2008.  The is the original
bitcoin paper, which is quite readable and historically interesting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch06.asciidoc&#34;&gt;&lt;em&gt;Chapter 6: The Bitcoin
Network&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch07.asciidoc&#34;&gt;&lt;em&gt;Chapter 7: The
Blockchain&lt;/em&gt;&lt;/a&gt;
from Andreas Antonopoulos&amp;rsquo; book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_2.pdf&#34;&gt;&lt;em&gt;Chapter 2: How Bitcoin Achieves
Decentralization&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_5.pdf&#34;&gt;&lt;em&gt;Chapter 5: Bitcoin
Mining&lt;/em&gt;&lt;/a&gt;
from Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller,
Steven Goldfeder. &lt;a href=&#34;https://piazza.com/princeton/spring2015/btctech/resources&#34;&gt;&lt;em&gt;Bitcoin and Cryptocurrency
Technologies&lt;/em&gt;&lt;/a&gt;.
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/JWtz4G4wUYKWU5&#34;
width=&#34;625&#34; height=&#34;400&#34; frameborder=&#34;2&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;!--
   &lt;div class=&#34;caption&#34;&gt;
Note: ink markings may not appear in the
embedded viewer.  To see them, [download the slides](/classes/class5-post.pptx).
   &lt;/div&gt;
--&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes:647dbe1e5b68015679492d34153c74f5&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;Why do we typically hash a message before signing it? What&amp;rsquo;s wrong if we always signed the full message?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What are the properties we want in a cryptographically secure hash function?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What is the &amp;ldquo;birthday attack&amp;rdquo; in the context of a hash function?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;!--page--&gt;

&lt;p&gt;Say you have 3000 distinct files in the &amp;ldquo;Documents&amp;rdquo; folder of our laptop. If
you have SHA-256 hashes for each of them, do you expect any repeats? If we
truncated the hash output to just 20 bits, how many repeats do you expect to
see?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What is the advantage of using a Merkle tree as opposed to directly hashing
the full string?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 5: Becoming Paranoid</title>
      <link>http://bitcoin-class.org/classes/class5/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class5/</guid>
      <description>

&lt;h2 id=&#34;schedule:d690e1859ec274fb7ed997cd7db3fba5&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
&lt;strong&gt;Wednesday, 9 September&lt;/strong&gt; (now): Checkup 1 revisions (if desired).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday, September 15&lt;/strong&gt; (8:29pm): &lt;a href=&#34;http://www.bitcoin-class.org/ps/ps1&#34;&gt;Problem Set 1&lt;/a&gt; due.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wednesday, September 23&lt;/strong&gt;: Check 2 (was originally scheduled for Monday, September 21)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readings for next week&lt;/strong&gt; (should be completed by Monday, September 21 at the latest, but earlier is better):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Satoshi Nakamoto, &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash
System&lt;/em&gt;&lt;/a&gt;, 2008.  The is the original
bitcoin paper, which is quite readable and historically interesting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch06.asciidoc&#34;&gt;&lt;em&gt;Chapter 6: The Bitcoin
Network&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch07.asciidoc&#34;&gt;&lt;em&gt;Chapter 7: The
Blockchain&lt;/em&gt;&lt;/a&gt;
from Andreas Antonopoulos&amp;rsquo; book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_2.pdf&#34;&gt;&lt;em&gt;Chapter 2: How Bitcoin Achieves
Decentralization&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_5.pdf&#34;&gt;&lt;em&gt;Chapter 5: Bitcoin
Mining&lt;/em&gt;&lt;/a&gt;
from Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller,
Steven Goldfeder. &lt;a href=&#34;https://piazza.com/princeton/spring2015/btctech/resources&#34;&gt;&lt;em&gt;Bitcoin and Cryptocurrency
Technologies&lt;/em&gt;&lt;/a&gt;.
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/jXzZMV6Wpg9kCK&#34;
width=&#34;625&#34; height=&#34;400&#34; frameborder=&#34;2&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;caption&#34;&gt;
Note: ink markings may not appear in the
embedded viewer.  To see them, &lt;a href=&#34;http://bitcoin-class.org/classes/class5-post.pptx&#34;&gt;download the slides&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes:d690e1859ec274fb7ed997cd7db3fba5&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;What does it mean for a problem to be &lt;em&gt;hard&lt;/em&gt;?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you know an algorithm with running time in &lt;span class=&#34;math&#34;&gt;&lt;em&gt;O&lt;/em&gt;(2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;)&lt;/span&gt; for problem &lt;em&gt;P&lt;/em&gt;, what do you know about the hardness of problem &lt;em&gt;P&lt;/em&gt;?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What are the most common reasons for cryptosystems to fail in practice?&lt;/p&gt;

&lt;!--page--&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;
We didn&amp;rsquo;t get to this in class, but will cover it in a future class.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;bitcoin-s-curve:d690e1859ec274fb7ed997cd7db3fba5&#34;&gt;Bitcoin&amp;rsquo;s Curve&lt;/h2&gt;

&lt;p&gt;Standards for Efficient Cryptography: &lt;a href=&#34;http://www.secg.org/sec2-v2.pdf&#34;&gt;&lt;em&gt;SEC 2: Recommended Elliptic Curve Domain Parameters&lt;/em&gt;&lt;/a&gt; (Certicom Research, 27 January 2010)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Verifiably random parameters offer some additional conservative features. These parameters are
chosen from a seed using SHA-1 as specified in ANSI X9.62 [X9.62]. This process ensures that
the parameters cannot be predetermined. The parameters are therefore extremely unlikely to
be susceptible to future special-purpose attacks, and no trapdoors can have been placed in the
parameters during their generation. When elliptic curve domain parameters are chosen verifiably
at random, the seed S used to generate the parameters may optionally be stored along with the
parameters so that users can verify the parameters were chosen verifiably at random.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does it mean for parameters to be &amp;ldquo;verifiably random&amp;rdquo;?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;randomness:d690e1859ec274fb7ed997cd7db3fba5&#34;&gt;Randomness&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Kolmogorov Complexity:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;K&lt;/em&gt;(&lt;em&gt;s&lt;/em&gt;)&lt;/span&gt; = the length of the shortest description of &lt;span class=&#34;math&#34;&gt;&lt;em&gt;s&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kolmogorov&amp;rsquo;s Definition of Random:&lt;/strong&gt; A sequence &lt;span
  class=&#34;math&#34;&gt;&lt;em&gt;s&lt;/em&gt;&lt;/span&gt; is random, if &lt;span class=&#34;math&#34;&gt;&lt;em&gt;K&lt;/em&gt;(&lt;em&gt;s&lt;/em&gt;) =
  |&lt;em&gt;s&lt;/em&gt;| + &lt;em&gt;C&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;What is the Kolmogorov Complexity of the string &lt;code&gt;0001000010000011111111100111...&lt;/code&gt;?
&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What is the Kolmogorov Complexity of the string: &lt;code&gt;1MRigEo5423vycLnUdSnA4C6Ts691fUiYu 18UikW89q9VgGDftQW3Gmuhe4sQDCFP5kD 19ZQwQmfAsgy47ErehfkW3SeSzNGFfH9iN 1AZCH1insc6JrT2Z9SiNvgtTugXg8sF8yd 15qYggRJvmyZfpchxvNqr6h3pNjw6bGBV9 1C943NwPPffUFY7VDzi3kt7KikXwc2vdkN 1JBhLLCgNYhR8f6AZcRS3mjfEAmMzPvwyf 1JvDrBSYm6o4ZTQUhwUE4FhPFxd2wuXWUR 1KcBM1RNhcp1oENycoD4AezA5Se4SrsZnA 16JZWC433XRxjWwR7X65uxRVFdLTmoPr4t 149LB8VYaT1BdMLyQUL92Kj6KrJfNwcp64 16zDGuzbwkHjW8dNYMw9stDjRbTzVSLZU1 1HfMaZn53ZDWKgmhWxk1UPZMjQ6QmpW6m 14gZWnuwKpRLTCUFCAgTZMciRaEdrkmEpr 1BZ2ateDPugmqLzYsXVy9EK5BguvXa2Bnj 1rCdRyMVcZHJaHA2LKUvRqYBcHqvAfQkc 1Ak8VwX6x4FPbA6aXTC3BQGQHnnhfaJuB8 129sBvF6Jternwdn5XcoA37LinQRcmAD5U1H2in 1HxEzSKHssPtog2krjFPiPfrKSiw4...&lt;/code&gt; ?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Daniel J. Bernstein, Tung Chou, Chitchanok Chuengsatiansup, Andreas
H&amp;uuml;lsing, Tanja Lange, Ruben Niederhagen, and Christine van Vredendaal.
&lt;a href=&#34;https://eprint.iacr.org/2014/571.pdf&#34;&gt;&lt;em&gt;How to Manipulate Curve Standards: A White Paper for the Black  Hat&lt;/em&gt;&lt;/a&gt;, 2014.&lt;/p&gt;

&lt;p&gt;How likely is it that the parameters for the secp256k1 curve used by bitcoin have a trapdoor?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;How should ECC parameters be generated for an important curve in a standard?
&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.root-dnssec.org/wp-content/uploads/2010/02/draft-icann-dnssec-ceremonies-00.txt&#34;&gt;&lt;em&gt;Root Zone DNSSEC KSK Ceremonies
Guide&lt;/em&gt;&lt;/a&gt;.
If you have a few hours to spare, you can watch a key signing for the
DNSSEC (Domain Name System): &lt;a href=&#34;https://www.iana.org/dnssec/ceremonies/20&#34;&gt;DNSSEC KSK Ceremony
20&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dual-ec-prng:d690e1859ec274fb7ed997cd7db3fba5&#34;&gt;Dual-EC PRNG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf&#34;&gt;NIST Special Publication 800-90A Recommendation for Random Number
Generation Using Deterministic Random Bit
Generators&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;math&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; and &lt;span class=&#34;math&#34;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;/span&gt; are points on the curve, specified by the standard (but not
explained how &lt;span class=&#34;math&#34;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;/span&gt; is choosen).  &lt;span class=&#34;math&#34;&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; is a generator, so there exists some
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sup&gt;&lt;em&gt;e&lt;/em&gt;&lt;/sup&gt; = &lt;em&gt;P&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;math&#34;&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; = &lt;/span&gt; initialize with seed randomness&lt;br /&gt;
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;+1&lt;/sub&gt; = &amp;phiv;(&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; &amp;times; &lt;em&gt;P&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; = &amp;phiv;(&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; &amp;times; &lt;em&gt;Q&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;math&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; =&lt;/span&gt; the low-order 16 bits of the &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;-coordinate of &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt;&lt;/span&gt;, how much work is it to find all the possible &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt; = (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;)&lt;/span&gt; values?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt;, what is &lt;span class=&#34;math&#34;&gt;&amp;phiv;(&lt;em&gt;e&lt;/em&gt; &amp;times; &lt;em&gt;A&lt;/em&gt;)&lt;/span&gt; where &lt;span class=&#34;math&#34;&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; is a possible &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; value?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Dan Shumow, Niels Ferguson.  &lt;a href=&#34;http://rump2007.cr.yp.to/15-shumow.pdf&#34;&gt;&lt;em&gt;On the Possibility of a Back Door in the
NIST SP800-90 Dual Ec Prng&lt;/em&gt;&lt;/a&gt;.
CRYPTO 2007 Rump Session.&lt;/p&gt;

&lt;p&gt;Michael Wertheimer (NSA), &lt;a href=&#34;http://www.ams.org/notices/201502/rnoti-p165.pdf&#34;&gt;&lt;em&gt;Encryption and the NSA Role in International
Standards&lt;/em&gt;&lt;/a&gt;, Notices
of the American Mathematical Society, February 2015.&lt;/p&gt;

&lt;p&gt;Wertheimer&amp;rsquo;s letter is an attempt to respond to &lt;a href=&#34;http://www.ams.org/notices/201406/rnoti-p623.pdf&#34;&gt;&lt;em&gt;Mathematicians Discuss the
Snowden Revelations&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The recent revelations about the NSA’s spying
programs are both dismaying and encouraging.
What is encouraging is that they might lead not
just to a reform of the intelligence agencies but
also to a more serious look at what the ongoing
and inevitable erosion of privacy is doing to our
society. What is dismaying is less the intrusive data
collection itself and more what it reveals about the
decision-making processes inside the government.&lt;/em&gt; (Andrew Odlyzko)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How satisfying is the NSA&amp;rsquo;s response?  Are you more dismayed or encouraged?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 4: Checkup</title>
      <link>http://bitcoin-class.org/classes/class4/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class4/</guid>
      <description>

&lt;h2 id=&#34;checkup-1:a69bef1e5f2725722420b5c4a32452b2&#34;&gt;Checkup 1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://bitcoin-class.org/checkup1.pdf&#34;&gt;Checkup 1&lt;/a&gt; and &lt;a href=&#34;http://bitcoin-class.org/feedback.pdf&#34;&gt;Feedback&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;checkup-revisions:a69bef1e5f2725722420b5c4a32452b2&#34;&gt;Checkup Revisions&lt;/h2&gt;

&lt;p&gt;If you are not happy with your answers to any of the questions on
Checkup 1, you may submit revised answers at the beginning of
Wednesday&amp;rsquo;s class.  (Just print the &lt;a href=&#34;http://bitcoin-class.org/checkup1.pdf&#34;&gt;Checkup 1&lt;/a&gt; and fill
in revised answers for any questions you want, or submit your clearly
marked answers on a separate page you generate.  It is not necessary to
resubmit answers to questions for which you are happy with your original
answers.)&lt;/p&gt;

&lt;h2 id=&#34;schedule:a69bef1e5f2725722420b5c4a32452b2&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
&lt;strong&gt;Wednesday, 9 September&lt;/strong&gt; (beginning of class): Checkup 1 revisions (if desired).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday, September 15&lt;/strong&gt; (8:29pm): &lt;a href=&#34;http://www.bitcoin-class.org/ps/ps1&#34;&gt;Problem Set 1&lt;/a&gt; due.
   &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 3: Digital Signatures</title>
      <link>http://bitcoin-class.org/classes/class3/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class3/</guid>
      <description>

&lt;h2 id=&#34;schedule:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
&lt;strong&gt;Monday, September 7&lt;/strong&gt;: Check-up 1.  This will be a short in-class quiz
  to test your understanding of the main concepts covered so far.  It
  will cover material from the readings (see Class 2 for details) and classes 1-3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday, September 15&lt;/strong&gt; (8:29pm): &lt;a href=&#34;http://www.bitcoin-class.org/ps/ps1&#34;&gt;Problem Set 1&lt;/a&gt; due.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/aX0xcwqcvhABQg&#34;
width=&#34;625&#34; height=&#34;400&#34; frameborder=&#34;2&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;caption&#34;&gt;
Note: ink markings may not appear in the
embedded viewer.  To see them, &lt;a href=&#34;http://bitcoin-class.org/classes/class3-post.pptx&#34;&gt;download the slides&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;signatures:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Signatures&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Real-life&amp;rdquo; signatures. Properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to verify&lt;/li&gt;
&lt;li&gt;Forging unlikely&lt;/li&gt;
&lt;li&gt;Hard to repudiate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Digital signatures. Should have same properties, in the absence of legal forces on the internet.&lt;/p&gt;

&lt;p&gt;Topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assymetric cryptography&lt;/li&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;li&gt;Elliptic curve cryptography&lt;/li&gt;
&lt;li&gt;Implementation pitfalls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordinary (or symmetric) Crypto&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both parties have to agree on a key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diffie-Hellman key exchange&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proposed in 1976&lt;/li&gt;
&lt;li&gt;Establishes a private secret key, unknown to any evesdropper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whitfield Diffie and Martin E. Hellman, &lt;a href=&#34;http://www-ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;&lt;em&gt;New Directions in Cryptography&lt;/em&gt;&lt;/a&gt;, IEEE Transactions on Information Theory, 1976.&lt;/p&gt;

&lt;p&gt;The paper concludes with an interesting historical discussion (that gets
bonus points for mentioning Thomas Jefferson):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;While at first the public key systems and one-way authentication systems suggested in this paper appear to be unportended by past cryptographic developments, it is possible to view them as the natural outgrowth of trends in cryptography stretching back hundreds of years. Secrecy is at the heart of cryptography. In early cryptography, however, there was a confusion about what was to be kept secret. &amp;hellip; After the invention of the telegraph, the distinction between a general system and a specific key allowed the general system to be compromised, for example by theft of a cryptographic device, without compromising future messages enciphered in new keys. &amp;hellip; The development of computers has led for the first time to a mathematical theory of algorithms which can begin to approach the difficult problem of estimating the computational difficulty of breaking a cryptographic system. The position of mathematical proof may thus come full circle and be reestablished as the best method of certification.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The last characteristic which we note in the history of cryptography is the division between amateur and professional cryptographers. Skill in production cryptanalysis has always been heavily on the side of the professionals, but innovation, particularly in the design of new types of cryptographic systems, has come primarily from the amateurs. Thomas Jefferson, a cryptographic amateur, invented a system which was still in use in World War II, while the most noted cryptographic system of the twentieth century, the rotor machine, was invented simultaneously by four separate people, all amateurs. We hope this will inspire others to work in this fascinating area in which participation has been discouraged in the recent past by a nearly total government monopoly.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Observe how the them of amateurs being the ones who design the important
cryptographic systems carries through with bitcoin. Although Satoshi&amp;rsquo;s
actual identity is unknown, it seems pretty clear that they are not a
professionally-trained cryptographer, and (so far, at least!) all the
digital currencies developed by world renowned cryptographers have
failed.&lt;/p&gt;

&lt;h3 id=&#34;discrete-logarithm-problem:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Discrete Logarithm Problem&lt;/h3&gt;

&lt;p&gt;Given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt;, and &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt;, find &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;x&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt; = &lt;em&gt;y&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Discrete&lt;/del&gt; Logarithm Problem: easy to solve for real numbers.&lt;/p&gt;

&lt;p&gt;What is the range of elements out of which we are randomly selecting?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;mod-5-exponentiation:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Mod 5 exponentiation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Multiplicative order&lt;/strong&gt; is the number of multiplication after which the result repeats.&lt;/p&gt;

&lt;p&gt;Multiplicative order of &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;/span&gt; is &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; if &lt;span class=&#34;math&#34;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; is the smallest positive integer
such that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt; = 1&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&#34;exponent-modulus:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Exponent Modulus&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Multiplicative order is at most &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt; - 1&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Pick random &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;0 &amp;le; &lt;em&gt;x&lt;/em&gt; &amp;lt; &lt;em&gt;p&lt;/em&gt; - 1&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;a&lt;/em&gt;&lt;/sup&gt; &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;b&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt; = &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;a&lt;/em&gt;+&lt;em&gt;b&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt; = &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;(&lt;em&gt;a&lt;/em&gt;+&lt;em&gt;b&lt;/em&gt;) mod &lt;em&gt;n&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;public-key-cryptography:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Public-key Cryptography&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Google announces &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;a&lt;/em&gt;&lt;/sup&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Bob picks random secret &lt;span class=&#34;math&#34;&gt;&lt;em&gt;b&lt;/em&gt;&lt;/span&gt;, computes &lt;span class=&#34;math&#34;&gt;(&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;a&lt;/em&gt;&lt;/sup&gt;)&lt;sup&gt;&lt;em&gt;b&lt;/em&gt;&lt;/sup&gt;=&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;ab&lt;/em&gt;&lt;/sup&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Bob encrypts message &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt; and sends: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;b&lt;/em&gt;&lt;/sup&gt;, &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;ab&lt;/em&gt;&lt;/sup&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;man-in-the-middle-mitm:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Man-in-the-middle (MITM)&lt;/h3&gt;

&lt;p&gt;Active adversary can still read everything. We have to know messages are coming from the right person.&lt;/p&gt;

&lt;h2 id=&#34;digital-signatures:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Digital Signatures&lt;/h2&gt;

&lt;p&gt;Discrete-log based signature&lt;/p&gt;

&lt;h3 id=&#34;elgamal-signature-scheme:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;ElGamal Signature Scheme&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed global parameters: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Private key: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Public key: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;a&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Signing:

&lt;ol&gt;
&lt;li&gt;Input: message &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Pick random &lt;span class=&#34;math&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Compute &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt; = &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt;&lt;/span&gt;;
       &lt;span class=&#34;math&#34;&gt;&lt;em&gt;s&lt;/em&gt; = (&lt;em&gt;m&lt;/em&gt;-&lt;em&gt;ar&lt;/em&gt;)&lt;em&gt;k&lt;/em&gt;&lt;sup&gt;-1&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt; - 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Send &lt;span class=&#34;math&#34;&gt;(&lt;em&gt;r&lt;/em&gt;, &lt;em&gt;s&lt;/em&gt;)&lt;/span&gt; with message &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Verification:

&lt;ol&gt;
&lt;li&gt;Input: message &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;, (&lt;em&gt;r&lt;/em&gt;,&lt;em&gt;s&lt;/em&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Verify that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;r&lt;/em&gt;&lt;sup&gt;&lt;em&gt;s&lt;/em&gt;&lt;/sup&gt;(&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;a&lt;/em&gt;&lt;/sup&gt;)&lt;sup&gt;&lt;em&gt;r&lt;/em&gt;&lt;/sup&gt; = &lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;m&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;p&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;avoiding-overly-long-numbers:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Avoiding (overly) long numbers&lt;/h2&gt;

&lt;p&gt;Real-life keys are long. We can use any group where discrete log is hard.&lt;/p&gt;

&lt;p&gt;A group is a set of elements and an associated operation such that it satisfies the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Closure&lt;/strong&gt;: &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt; * &lt;em&gt;b&lt;/em&gt;&lt;/span&gt; is also a group element.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Associativity:&lt;/strong&gt; for all &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;: (&lt;em&gt;a&lt;/em&gt;&lt;em&gt;&lt;em&gt;b&lt;/em&gt;)&lt;/em&gt;&lt;em&gt;c&lt;/em&gt; = &lt;em&gt;a&lt;/em&gt;&lt;em&gt;(&lt;em&gt;b&lt;/em&gt;&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identity element:&lt;/strong&gt; there exists an element &lt;span class=&#34;math&#34;&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt;, such that for every element &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt;: &lt;em&gt;a&lt;/em&gt; * &lt;em&gt;e&lt;/em&gt; = &lt;em&gt;a&lt;/em&gt; = &lt;em&gt;e&lt;/em&gt; * &lt;em&gt;a&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inverse:&lt;/strong&gt; for every element &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt;&lt;/span&gt;, there exists an element &lt;span class=&#34;math&#34;&gt;&lt;em&gt;b&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;a&lt;/em&gt; * &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;e&lt;/em&gt; = &lt;em&gt;b&lt;/em&gt; * &lt;em&gt;a&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional Cryptographic Properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discrete logarithm should be hard&lt;/li&gt;
&lt;li&gt;Group operation should be efficient&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;elliptic-curve-cryptography-ecc:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Elliptic Curve Cryptography (ECC)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Group elements are points on a curve, e.g., &lt;span class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 7&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Point &amp;ldquo;addition&amp;rdquo; using &amp;ldquo;geometry&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;elliptic-curve-digital-signature-algorithm:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Elliptic Curve Digital Signature Algorithm&lt;/h3&gt;

&lt;p&gt;Follows the same structure as ElGamal signature, but only on &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;-coordinate.&lt;/p&gt;

&lt;h2 id=&#34;pitfalls:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Pitfalls&lt;/h2&gt;

&lt;p&gt;If we ever repeat signing nonce, we leak the private key.  Sony actually
did this with Playstation 3 consoles (&lt;a href=&#34;https://events.ccc.de/congress/2010/Fahrplan/attachments/1780_27c3_console_hacking_2010.pdf&#34;&gt;&lt;em&gt;Console Hacking 2010: PS3 Epic Fail&lt;/em&gt;&lt;/a&gt;, CCC 2010).&lt;/p&gt;

&lt;p&gt;Poor randomness makes private keys predictable. Use &lt;code&gt;/dev/urandom&lt;/code&gt;
(Linux) or &lt;code&gt;java.security.SecureRandom&lt;/code&gt; in Java.  If you use a
pseudorandom number generator that is seeded with an easily guessed
value, you are in big trouble!  A common mistake was to use
&lt;code&gt;Math.random()&lt;/code&gt; or &lt;code&gt;srand(time(0))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Logjam attack: downgrade security during handshake.&lt;/p&gt;

&lt;h2 id=&#34;notes:b9b50bf0a87e56763567aaebbc820d47&#34;&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How are digital signatures and real-life signatures different in terms of why we trust them? What stops each from being forged by others?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assume somebody really clever has a way of solving the discrete logarithm problem easily. That is, for any given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt;, and &lt;span class=&#34;math&#34;&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt;, the adversary can compute &lt;span class=&#34;math&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that &lt;span class=&#34;math&#34;&gt;&lt;em&gt;g&lt;/em&gt;&lt;sup&gt;&lt;em&gt;x&lt;/em&gt; mod &lt;em&gt;p&lt;/em&gt; = &lt;em&gt;y&lt;/em&gt;&lt;/span&gt;. How can this algorithm be used to break security of Diffie-Hellman protocol?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is a nonce? What breaks if we reuse it between encrypted messages?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In elliptic curve cryptography, why do we use &lt;span class=&#34;math&#34;&gt;mod &lt;em&gt;p&lt;/em&gt;&lt;/span&gt; integers? What would go wrong if we used real numbers?  What would go wrong if we used unbounded integers?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mining Pools</title>
      <link>http://bitcoin-class.org/announcements/miningpools/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/announcements/miningpools/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s the up-to-date graph of hashing power distributed by mining pools
(that I wasn&amp;rsquo;t able to find in class Monday):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blockchain.info/pools?timespan=4days&#34;&gt;https://blockchain.info/pools?timespan=4days&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the current results for the past for days, more than 50% of
the hashing power appears to be held by just three mining pools: F2Pool
(20%), BitFury (17%), and AntPool (17%).  Each of these has around 75
PH/s (one peta-hash means 10&lt;sup&gt;15&lt;/sup&gt; computations of the bitcoin
block hashing function, which actually involves two computations of
SHA-256).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll talk about mining a lot more in the coming weeks to get a good
understanding of what this means technically, as well as the
implications for the blockchain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 1 Posted</title>
      <link>http://bitcoin-class.org/announcements/ps1/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/announcements/ps1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://bitcoin-class.org/ps/ps1/&#34;&gt;Problem Set 1&lt;/a&gt; is now posted, and is due Tuesday, 15 September (8:29pm).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email/Calendar Update</title>
      <link>http://bitcoin-class.org/announcements/email/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/announcements/email/</guid>
      <description>&lt;p&gt;The email address, &lt;code&gt;ccc-staff@cs.virginia.edu&lt;/code&gt;, reaches all the course
staff (Dave, Samee, and Ori).  If you have a question that can be asked
publicly, its best to post it as a comment on the website.  But, for
things that don&amp;rsquo;t belong as website comments, use that email address to
reach all of us.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve updated the course calendar to include all the deadlines, and
encourage you to incorporate this into your calendar:
&lt;a href=&#34;https://www.google.com/calendar/ical/rmjagdrnmu3a9h2q5199lg4t28%40group.calendar.google.com/public/basic.ics&#34;&gt;use this link&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 2: Cryptography</title>
      <link>http://bitcoin-class.org/classes/class2/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bitcoin-class.org/classes/class2/</guid>
      <description>

&lt;h2 id=&#34;schedule:59cb8283a9bd282131a45da3029e68b4&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;todo&#34;&gt;
Before the next class (Wednesday, Sept 2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch03.asciidoc&#34;&gt;&lt;em&gt;Chapter 3: The Bitcoin
Client&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&#34;https://github.com/aantonop/bitcoinbook/blob/develop/ch04.asciidoc&#34;&gt;&lt;em&gt;Chapter 4: Keys, Addresses,
Wallets&lt;/em&gt;&lt;/a&gt;
from Andreas M. Antonopoulos, &lt;a href=&#34;https://github.com/aantonop/bitcoinbook&#34;&gt;&lt;em&gt;Mastering Bitcoin: Unlocking Digital
Cryptocurrencies&lt;/em&gt;&lt;/a&gt; book (also
available &lt;a href=&#34;http://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Crypto-Currencies/dp/1449374042&#34;&gt;in
print&lt;/a&gt;).
You can skim most of Chapter 3, especially the parts about installing
bitcoin core, but should read Chapter 4.  (You should have already read
Chapters 1 and 2.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href=&#34;http://bitcoin-class.org/docs/princeton-book/chapter_1.pdf&#34;&gt;&lt;em&gt;Chapter 1: Introduction to Cryptography and
Cryptocurrencies&lt;/em&gt;&lt;/a&gt;,
from Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller,
Steven Goldfeder. &lt;a href=&#34;https://piazza.com/princeton/spring2015/btctech/resources&#34;&gt;&lt;em&gt;Bitcoin and Cryptocurrency
Technologies&lt;/em&gt;&lt;/a&gt;.
This chapter starts with cryptographic hashing and authenticated data
structures (which we are deferring until until later, but is still worth
reading now), and Section 1.3 covers digital signatures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Monday, September 7&lt;/strong&gt;: Check-up 1.  This will be a short in-class quiz
  to test your understanding of the main concepts covered so far.  It
  will cover material from the readings and classes 1-3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday, September 15&lt;/strong&gt; (8:29pm): &lt;a href=&#34;http://www.bitcoin-class.org/ps/ps1&#34;&gt;Problem Set 1&lt;/a&gt; due.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ppf9BW9JlnIXC5&#34;
width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;caption&#34;&gt;
Note: ink markings may not appear in the
embedded viewer.  To see them, &lt;a href=&#34;http://bitcoin-class.org/classes/class2-post.pptx&#34;&gt;download the slides&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;!--
how is it possible to own something digital?

- copyright!

England

1662 - Licensing of the Press Act

guild of printers, &#34;Stationer&#39;s Company&#34; (formed in 1403, royal charter in 1557)
granted monopoly on printing [cf. Chinese granting monopoly on salt production]
exclusive right to print - responsible for censoring

ended in 1694 - no restrictions        


Act of Queen Anne
--&gt;

&lt;h2 id=&#34;cryptography:59cb8283a9bd282131a45da3029e68b4&#34;&gt;Cryptography&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;kryptos&lt;/em&gt; is a Greek root meaning hidden (&amp;ldquo;secret&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;crypto&lt;/em&gt; + &lt;em&gt;graphy&lt;/em&gt; = &amp;ldquo;secret writing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Decryption&lt;/em&gt; is what the intended receiver does.&lt;br /&gt;
&lt;em&gt;Cryptanalysis&lt;/em&gt; is what an attacker does.&lt;/p&gt;

&lt;p&gt;How are cryptography and security related?
&lt;div class=&#34;gap&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;simple-message-cryptosystem:59cb8283a9bd282131a45da3029e68b4&#34;&gt;Simple Message Cryptosystem&lt;/h3&gt;

&lt;p&gt;Two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.  The input is called the
&lt;strong&gt;plaintext&lt;/strong&gt;; the output is called the &lt;strong&gt;ciphertext&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Required properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; for all possible messages, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt;(&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;)) = &lt;em&gt;m&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; given the output of &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;)&lt;/span&gt;, it is &amp;ldquo;hard&amp;rdquo; to learn anything interesting about &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://web.mit.edu/newsoffice/2013/goldwasser-and-micali-win-turing-award-0313.html&#34;&gt;&lt;em&gt;Goldwasser and Micali win Turing Award: Team honored for
‘revolutionizing the science of
cryptography&amp;rsquo;&lt;/em&gt;&lt;/a&gt;,
MIT News, 13 March 2013.&lt;/p&gt;

&lt;p&gt;Their paper that introduced semantic security notions is:
&lt;a href=&#34;http://groups.csail.mit.edu/cis/pubs/shafi/1982-stoc.pdf&#34;&gt;&lt;em&gt;Probabilistic Encryption and How to Play Mental Poker Keeping Secret
All Partial
Information&lt;/em&gt;&lt;/a&gt;,
ACM Symposium on Theory of Computing, 1982.  (We will not get into
formal security definitions or proofs in this class, but you should take
&lt;a href=&#34;http://www.cs.virginia.edu/~mohammad/&#34;&gt;Mohammad Mahmoody&lt;/a&gt;&amp;rsquo;s class to
learn them.)&lt;/p&gt;

&lt;h3 id=&#34;keyed-symmetric-cryptosystem:59cb8283a9bd282131a45da3029e68b4&#34;&gt;Keyed Symmetric Cryptosystem&lt;/h3&gt;

&lt;p&gt;Claude Shannon, &lt;a href=&#34;http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf&#34;&gt;&lt;em&gt;Communication Theory of Secrecy Systems&lt;/em&gt;&lt;/a&gt;, 1949 (work done during World War II, but declassified later).&lt;/p&gt;

&lt;p&gt;Two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;red&#34;&gt;k&lt;/font&gt;&lt;/em&gt;: byte[], &lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;red&#34;&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Required properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; for all possible messages, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;, and keys, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;red&#34;&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;red&#34;&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;)) = &lt;em&gt;m&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; given &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;&lt;/span&gt;, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;&lt;/span&gt;, and the output of &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;(&lt;font color=&#34;red&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/font&gt;, &lt;em&gt;m&lt;/em&gt;)&lt;/span&gt; it is &amp;ldquo;hard&amp;rdquo; to learn anything interesting about &lt;span class=&#34;math&#34;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt; (without knowing &lt;span class=&#34;math&#34;&gt;&lt;font color=&#34;red&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/font&gt;&lt;/span&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are these properties enough to be secure against an active attacker?
&lt;div class=&#34;gap&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keyspace:&lt;/strong&gt; set of all possible keys.  Assume (hopefully for
  user!) that key is drawn uniformly from this set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brute Force Attack:&lt;/strong&gt; for all possible keys, &lt;span
  class=&#34;math&#34;&gt;&lt;em&gt;k&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt;&lt;/span&gt;, try computing &lt;span
  class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt;)&lt;/span&gt; to see if it looks like a
  reasonable plaintext.&lt;/p&gt;

&lt;p&gt;In order for a brute force attack to succeed, what properties are
necessary about (1) the keyspace and (2) the message space?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Where is symmetric cryptography used in your bitcoin wallet?&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;!--page--&gt;

&lt;p&gt;(This material was not actually covered in class 2, but will be covered in class 3.)&lt;/p&gt;

&lt;h2 id=&#34;asymmetric-cryptosystems:59cb8283a9bd282131a45da3029e68b4&#34;&gt;Asymmetric Cryptosystems&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Asymmetric cryptosystems&lt;/strong&gt; use &lt;em&gt;different functions&lt;/em&gt; for encrypting
  and decrypting, with the property that revealing the encryption
  function does not reveal the decryption function.  With Kerckhoff&amp;rsquo;s
  Principle, this means there are different keys for encryption and
  decryption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate:&lt;/strong&gt; produce key pair, &lt;span class=&#34;math&#34;&gt;(&lt;em&gt;&lt;font color=&#34;green&#34;&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;&lt;font color=&#34;red&#34;&gt;KR&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;)&lt;/span&gt;, and publish the public key, &lt;span class=&#34;math&#34;&gt;&lt;em&gt;&lt;font color=&#34;green&#34;&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;green&#34;&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;: byte[], &lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class=&#34;math&#34;&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color=&#34;red&#34;&gt;KR&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Messages:&lt;/strong&gt; Sender encrypts a message with the recipient&amp;rsquo;s public key.
  Recipient decrypts the message using her private key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signatures:&lt;/strong&gt; Signer encrypts a message with her own private key.
  Verifier checks the message using the signer&amp;rsquo;s public key.&lt;/p&gt;

&lt;p&gt;How can we use asymmetric cryptosystems to &lt;em&gt;prove&lt;/em&gt; ownership?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;How can we use asymmetric cryptosystems to &lt;em&gt;transfer&lt;/em&gt; ownership?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Where is asymmetric cryptography used in your wallet?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Assuming we have a strong asymmetric cryptosystem, what hard problems are left
to solve to make a cryptocurrency?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>