Title: Class 15: Script
Date: 2015-03-04

## Schedule

   <div class="todo"> 

- [Project 2 Part
  2](|filename|../../pages/projects/project2/project2.md) is due **tomorrow** (Thursday, 5 March).  
  Submission is by email, send a PDF with your
  answers to questions 5-9.

- Keep thinking about ideas for your project.  The first deliverable for
  the project will be a preliminary proposal due on March 19.

- Enjoy your Spring Break!
   </div>

<center> 
<iframe src="//www.slideshare.net/slideshow/embed_code/45811474" width="670" height="380" frameborder="2" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div class="caption">Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  <br>If you [download the slides](|filename|./class15-inked.pptx), they are present though.
Hopefully, the player will be fixed someday. </div>
</center>

# Bitcoin Script

Transaction outputs in bitcoin are protected by _locking scripts_, and
must be unlocked by _unlocking scripts_.  The scripts are written in a
simple (compared to, say, the Java Virtual Machine language, but quite
complex and poorly specified for what one might expect would be needed
for bitcoin transactions) stack-based language.  A transaction output is
not unlocked unless an unlocking script is provided such that the result
of executing the unlocking script, followed by executing the locking
script, is a stack with value True on top (and no invalid transaction
results during the execution).

Some script instructions:

|Opcode|Input|Output|Description|
|--|--|--|--|
|`OP_1`| - | **1** | Pushes a **1** (True) on the stack |
|`OP_DUP`| _a_ | _a_ _a_ | Duplicates the top element of the stack |
|`OP_ADD`| _a_ _b_ | (_a_+_b_) | Pushes the sum of the top two elements. |
|`OP_EQUAL`| _a_ _b_ | **0** or **1** | Pushes **1** if the top two elements are exactly equal, otherwise **0**. |
|`OP_VERIFY` | _a_ | - | If _a_ is not **True** (**1**), terminates as Invalid. |
|`OP_RETURN`| - | - | Terminates as Invalid. |
|`OP_EQUALVERIFY` | _a_ _b_ | - | If _a_ and _b_ are not equal, terminates as Invalid. |
|`OP_HASH160` | _a_ | H(_a_) | Pushes bitcoin address, RIPEMD(SHA256(_a_)). |

Some more complex instructions:

`OP_IF` [statements] `OP_ENDIF` - If the top of the stack is **1**, executes [statements].  Otherwise does nothing.

`OP_CHECKSIG` - Pops two items from the stack, _publickey_ and _sig_.
Verifies the entire transaction (known from node state, not the stack)
using the _publickey_ and _sig_.  If the signature is valid, push **1**;
otherwise, **0**.

`OP_1 OP_DUP OP_ADD OP_DUP OP_SUB OP_VERIFY`
<div class="gap">

</div>

The most common locking script (send to public address):  
`OP_DUP`  
`OP_HASH160`  
`OP_DATA20` _(bitcoin address)_  
`OP_EQUALVERIFY`  
`OP_CHECKSIG`  

What must be on the stack for the locking script to succeed (end with **1** on top of stack)?
<div class="gap">

</div>

`OP_HASH160`  
[20-byte hash]  
`OP_EQUAL`  

What must be on the stack for the locking script above ("Pay-to-Script-Hash") to succeed?
<div class="gap">

</div>


According to [Most Popular Transaction
Scripts](http://www.quantabytes.com/articles/a-survey-of-bitcoin-transaction-types)
(analysis of all transactions in first 290,000 blocks), the ninth most popular script is:
`OP_RETURN OP_DATA_40`

What must be on the stack for the `OP_RETURN OP_DATA_40` locking script to succeed (end with
**1** on top of stack)? (Trick question: what happens to the coin
protected by this locking script?)
<div class="gap">

</div>

Is the bitcoin scripting language Turing-complete?
<div class="gap">

</div>

If you are not clear on what Turing-complete means, see [_Dori-Mic and the Universal Machine!_](http://www.dori-mic.org)

## BTCD Code

Type: [Script](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/script.go#L206) is the virtual machine the executes scripts (note that it has two Stacks) 

Execute a script: [Execute](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/script.go#L723)  
Execute one instruction: [Step](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/script.go#L782)  

[Opcodes](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/opcode.go#L38)  
[exec](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/opcode.go#L971) function executes one instruction  

Some interesting opcode implementations:
[OP_IF](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/opcode.go#L1143)  
[OP_RETURN](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/opcode.go#L1235)

## Bitcoin Core Code

[script/interpreter.cpp](https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp)

[OP_DUP](https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp#L524)  
[Crypto](https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp#L752)
[OP_CHECKSIG](https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp#L785)

## Links

[Script Playground](http://www.crmarsh.com/script-playground/)

Some interesting things you can do with bitcoin scripts:  
[Contracts](https://en.bitcoin.it/wiki/Contracts) (see also Nick Szabo's [_Formalizing and Securing Relationships on Public Networks_](http://szabo.best.vwh.net/formalize.html)  
[Secure Multiparty Computations](http://eprint.iacr.org/2013/784) (to implement lotteries)  

The `OP_RETURN`/pasted script execution bug doesn't even make this list of [_The 9 Biggest Screwups in Bitcoin History_](http://www.coindesk.com/9-biggest-screwups-bitcoin-history/).

[Block 71036](http://blockexplorer.com/rawblock/00000000000997f9fd2fe1ee376293ef8c42ad09193a5d2086dddf8e5c426b56)
